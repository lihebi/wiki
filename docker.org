#+TITLE: Docker

Install =docker= package and start the service by
#+BEGIN_EXAMPLE
systemctl start docker
systemctl enable docker
#+END_EXAMPLE

We can build Debian image easily on Arch:

#+BEGIN_EXAMPLE
mkdir jessie-chroot
# debootstrap jessie ./jessie-chroot http://http.debian.net/debian/
# cd jessie-chroot
# tar cpf - . | docker import - debian
# docker run -t -i --rm debian /bin/bash
#+END_EXAMPLE

Re-launch a stopped container can be done by =docker start
<container>= and will be detached by default if it is run by that.

You can assign a name to the container so that you can better remember
and reference it.

* General operations

- docker images :: list images
- docker images <name> :: list images whose name is "name" (can have different) tags
- docker run [option] <image> /bin/bash :: run a *fresh* container based on the image.
  - -i :: interactive
  - -d :: detach (opposite to -i)
  - -t :: assign a tty. Even when using -d, you need this.
  - -p <port> :: export the port <port> of the container. The host
                 port will be randomly assigned. Running =docker ps=
                 will show the port binding information.
- docker exec <ID> echo "hello" :: run some command with arguments on the already run container <ID>
  - ID can be the UUID or container name
  - you can use -it as well, e.g. docker exec -it <ID> /bin/bash
- docker start <ID> :: start an already stopped container
- docker diff <ID> :: show the difference made from the base image
- docker commit <ID> lihebi/my-container :: create a new image based on the container <ID>
- docker login :: login so that you can push
- docker push lihebi/my-container :: push to docker hub
- docker pull lihebi/my-container :: pull from the internet

Alternatively, you can write a Dockerfile to specify how to build a image.

#+BEGIN_EXAMPLE
FROM ubuntu 15.04
RUN ech o"hello" > /tmp/newfile
#+END_EXAMPLE

In the folder containing Dockerfile, run to build the image:
#+BEGIN_EXAMPLE
docker build -t my-ubuntu .
#+END_EXAMPLE

- docker history <image> :: show which layers are used to create <image>


* Remove sudo
#+BEGIN_EXAMPLE
sudo groupadd docker
sudo gpasswd -a ${USER} docker
sudo service docker restart
newgrp docker
#+END_EXAMPLE

* Dockerfile

I'm trying a docker file for srcml container. 
#+BEGIN_EXAMPLE
FROM debian
RUN apt-get -y update & apt-get install -y libarchive-dev libcurl4-openssl-dev
RUN wget http://131.123.42.38/lmcrs/beta/srcML-Ubuntu14.04-64.deb srcml.deb
RUN dpkg -i srcml.deb
#+END_EXAMPLE
* TODO Docker hub
When pushing and pulling, what exactly happens?
