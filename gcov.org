#+TITLE: gcov

* How to run

Compile your program with two flags
#+BEGIN_EXAMPLE
gcc -fprofile-arcs -ftest-coverage a.c
#+END_EXAMPLE

This will produce =a.gcda= (arcs) and =a.gcno= (coverage).

Then run the program by
#+BEGIN_EXAMPLE
./a.out
#+END_EXAMPLE

run =gcov= in the same directory:

#+BEGIN_EXAMPLE
gcov a.c
#+END_EXAMPLE

This will produce the coverage, and create a =a.c.gcov= file.

* Different options
When invoking gcov, you can control the output format:
- =gcov -b a.c=: output branching information

* .gcov file format
#+BEGIN_EXAMPLE
ExeCount : linum : line
#+END_EXAMPLE

=#= in the ExeCount means no execution.

* Gprof
Compile and link with the =-pg= option.
When running the program, a =gmon.out= will be produced.
It will overwrite if the file exists.
Running the =gprof= is like:
#+BEGIN_EXAMPLE
gprof options exe-file profile-data-file
#+END_EXAMPLE

=exe-file= defaults to =a.out=, =profile-data-file= defaults to =gmon.out=.

As I tried, this is not friendly for C++ programs. The output is full of STL namespace.



* Some experience

- The coverage information will accumulate: run a second time, it will possibly increase.
- branches executed is the for the head of branch.
- branches taken at least once is for the ordinary branch coverage
