#+TITLE: Dynamic Programming

Solve problem by breaking down into simpler sub-problems.

* One dimension
Given n, find the number of different ways to write n as the sum of 1,3,4

** Define sub-problems
D_n is the number of ways to write n as sum of 1,3,4

** Recurrence formula
D_n = D_{n-1} + D_{n-3} + D_{n-4}

* Two Dimensions
Given two string x and y, find the length of longest common sub-sequence.

** Define sub-problems

D_{ij} is the length for x_{i..i} and y_{1..j}

** Recurrence formula
D_{ij} =
- if x_i = y_i: D_{i-1,j-1} + 1
- otherwise: max{D_{i-1,j}, D_{i,j-1}}

* Interval DP
Given a string x=x_{1..n},
find the minimum number of characters that need to be inserted to make it a palindrome.

** Define sub-problem
D_{i,j} be the minimum number of characters.

** Recurrence formula
say y_{1..k} is the palindrome for x_{i..j},
*we have either y_1 = x_i or y_k = x_j*

D_{ij} =
- if x_i \neq x_j: 1 + min{D_{i+1,j}, D_{i,j-1}}
- if x_i = x_j: D_{i+1,j-1}

* Tree DP
Given a tree, color nodes black as many as possible without coloring two adjacent nodes.

** Define
- B(r) as the maximum nodes if the (root) node r is colored black.
- W(r) as the maximum nodes if the (root) node r is colored white.

** Recurrence
- B(v) = 1 + \sum_{children} W(c)
- W(v) = 1 + \sum_{children} max{B(c), W(c)}
