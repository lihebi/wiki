#+TITLE: Model Checking

Model checking cite:2004-Book-Huth-Logic is based on /temporal
logic/. Models M are transition systems, and properties $\phi$ are
formulas in temporal logic. /Model checking/ is the process of
computing an answer to the question whether $M,s \models \phi$ holds.

The model is typically modeled as /Kripke Structure (KS)/.
1. S: set of states
2. T: transitions: $\subset SxS$
   - /left total/: forall s, exists s', s,s' \in T. I.e. every state
     has an outgoing edge.
3. L: labeling function, e.g. busy, non-busy. S->P(AP): P: powerset,
   AP: set of propositions

There are two types of temporal logic, the Linear-time Temporal Logic
(LTL) and Computation Tree Logic (CTL).

* Temporal Logic

** Linear-time Temporal Logic (LTL)
LTL has the basic operations, including $\neg$, $\wedge$, $\vee$,
$\rightarrow$. In addition, it has /temporal connectives/ X (next), F
(future), G (globally), U (until), W (weak-until), R (release).
Operators have priority and associativity.
- unary bind most tightly, including $\neg$, X, F, G
- U, R, W
- $\wedge$ and $\vee$
- Lastly, the $\rightarrow$

A path $\pi$ in LTL is an *infinite* sequence of states (starting from
the initial state?). The suffix $\pi^3$ means dropping the path first
two states.

The semantic of LTL formulas:
- Basic:
  - $\pi \models \top$: true
  - $\pi \models \bot$: false
  - $\pi \models p$ iff $p \in L(s_1)$
- Simple operators including $\neg$, $\wedge$, $\vee$ have intuitive
  semantics
- $\pi \models \phi_1 \rightarrow \phi_2$ iff $\pi \models \phi_2$
  whenever $\pi \models \phi_1$. +In other words, $\pi \models
  \phi_1$, otherwise $\pi \models \phi_2$+. *This is very different
  from CTL arrows*.
- Simple connectives including X,G,F have intuitive semantics
- $\pi \models \phi U \psi$ iff *$\phi$ holds until some point, $\psi$
  holds*
- $\pi \models \phi W \psi$: the weak until is closely related to
  until. It contains the semantic of until, but also *allow $\phi$ to
  hold in all states*. So something like $W = U \vee G$
- $\pi \models \phi R \psi$: this is similar (but not dual) to weak
  until: it says *$\psi$ holds until some point, $\phi$ holds*. Or,
  $\psi$ holds all the time.

In temporal logic, future starts from right now.

Putting the LTL formula into model checking problem, we have that,
$M,s \models \phi$ iff for *every* execution path $\pi \models \phi$.

LTL formulas $\phi$ and $\psi$ are equivalent, written as $\phi \equiv
\psi$, iff both hold or not hold for *all* models. We have several
equivalent classes:
- $\neg (\phi \wedge \psi) \equiv \neg \phi \vee \neg \psi$
- *F and G are dual of each other*: $\neg G \phi \equiv F \neg \phi$
- *X is dual of itself*: $\neg X \phi \equiv X \neg \phi$
- *U and R are dual of each other*: $\neg (\phi U \psi) \equiv \neg \phi
  R \neg \psi$
- *F distributes over $\vee$, G distributes over $\wedge$*: $F(\phi \vee
  \psi) \equiv F\phi \vee F\psi$
- Actually F and G can be expressed by U and R: $F\phi \equiv \top U
  \phi$, $G\phi \equiv \bot R \phi$
- The relation of strong and weak until, as we stated informally
  before, can be expressed as equivalent class as well:
  - $\phi U \psi \equiv \phi W \psi \wedge F \psi$
  - $\phi W \psi \equiv \phi U \psi \vee G \phi$
- Lastly, W and R are similar to each other, thus, we can express
  - $\phi W \psi \equiv \psi R (\phi \vee \psi)$
  - $\phi R \psi \equiv \psi W (\phi \wedge \psi)$

Since many of the connectives are equivalent, the question is, what is
the adequate set of connectives? Here is the conclusion:
- X is completely orthogonal, thus X must be in
- Actually, any one of U,R,W (actually should also includes G,F) can
  be used to get others, simply look at the equivalent classes and the
  dual relationships.
- We are assuming free use of negation. One useful thought is the
  adequate set without using negation.

*** Model checking algorithm and Buchi Automata

The basic strategy is to construct an automata for checking the
negation of the formula. The automata is known as /tableau/ in this
context. A trace in this automata corresponds to a path $\pi$ in
LTL. This automata is designed such that, for all paths, $\pi \models
\phi$ iff the trace of $\pi$ is accepted by the automata.

A brief introduction to automata. The /finite state machine/ (or
/finite automation/) has finite number of states, and the input is a
finite string. There are some states as accepting states. The machine
accepts an input if the state finally transit into accepting state.

An /\omega-automation/ (or /stream automation/) is a variant of finite
automation, but working with infinite strings as input, thus
\omega-automation does not stop. Since it does not stop, the
acceptance is characterized by acceptance conditions, rather than
simple states. An \omega-automation can be deterministic or
non-deterministic. There are several versions of \omega-automation,
differs only in the acceptance conditions. Like other types of
automata, the input accepted by the automata is called its language.


/Buchi automata/ is one type of \omega-automation.  A Buchi automata
accepts an input if there exists a run of the automation that visits
at least one of the final states infinitely often. The language of
Buchi automata is \omega-regular language, the infinite version of
regular language.

There are algorithms to translate a LTL to an equivalent Buchi
automata, thus checking of LTL can be modeled as the acceptance of
the corresponding Buchi automata.

BA: Buchi automata defined over a alphabet \Sigma.  BA = (Q, Q0,
\Sigma, \Delta, F)
- Q:  set of states 
- Q0: set of start states \subseteq Q
- \Sigma: alphabet (edge labels)
- \Delta: edge relation \subseteq Q \times \Sigma \Q
  (q, a, q') \in \Delta implies there exists an edge from state
  q to state q' and the edge is labeled with a. 
- F: set of final states \subseteq Q

A run \rho of BA over an infinte string \sigma is defined as follows:
\rho: N --> Q is a function that maps natural numbers to states in the
BA such that
- \rho(0) \in Q0  - the 0-th mapping belongs to some start state
- (\rho(i) \sigma[i] \rho(i+1)) \in \Delta 

A run describes the sequence of states in the BA which when traversed
starting from a start state results in consumption of the symbols
in the input string. 

Accepting Run: Given a \rho over a string \sigma

\begin{eqnarray}
inf(\rho) & = & { q | \text{q appears infinitely often in} \rho } \\
& = & \exists q. \forall i \geq 0.\exists j \geq i.rho(j) = q.
\end{eqnarray}

There exists a q in BA that appears infinitely often in the run over
the given string.

- A run \rho over a string \sigma is accepting iff 
  inf(\rho) \cap F \neq \emptyset. 
- A string is accepted by BA iff there exists an 
  accepting run \rho.

Given a BA, the language of BA is the set of all strings that are
accepted by the BA. This set is denoted by L(BA).

/Generalized Buchi Automata (GBA)/ is defined as

$$GBA = (Q, Q0, \Sigma, \Delta, F)$$ 

where F is a set of sets. That is F = {F1, F2, . . ., Fn}.

Acceptance condition: An accepting run \rho is such that \forall i \in
[1..n]: inf(\rho) \cap F_i \neq \emptyset.  In other words, in each
Fi, there exists some state that appears infinitely many times in the
accepting run.

An algorithm from Kripke Structure to Buchi Automata.  The objective:
given one or more start states in Kripke structure (S, S0, T, L),
construct a Buchi automata whose language is the set of infinite paths
in KS starting from S0.

Construction: 

$$B_KS = (S \cup {i}, {i}, Bool(AP), \Delta, S \cup {i})$$

where
- Bool(AP): boolean combination of atomic propositions
  that describe the states in KS.
  (in general can be infinite but as we will see, the
   set for a specific KS is going to be finite)
- \Delta is edge relation as follows:
  * i -a-> s  if s \in S0 and forall p \in L(s) 
                              forall q \not\in L(s): a = (\land p) \land (\land q)
  * s -a-> s' if s -> s' \in T and forall p \in L(s') 
                                   forall q \not\in L(s'): a = (\land p) \land (\land q)  

Note: all the states in the KS are considered a final state and i is
the start state which has an edge to every state in S0.  Therefore,
any infinite path starting from i is described over the sequence
propositional logic formulas that hold in sequence of states in the
KS path. 

The formal Model Checking algorithm of LTL can finally be described
using the Buchi automata.  Given a KS, construct the corresponding
B_KS.  Given a property in LTL \varphi, construct the Buchi automata
corresponding to its negation $B\neg\varphi$. We can claim that: if
there exists a path in $B_{KS}$ that is accepted by the
$B\neg\varphi$, then KS does not satisfy $\varphi$.  The algorithm
will be to construct $L(B_{KS}) \cap L(B\neg\varphi)$ using $B_{KS}$
\times B\neg\varphi, and check for emptiness.


** Computation Tree Logic (CTL)

In the model context, LTL implicitly *quantifies universally* over all
paths. Thus, we can only specify whether a property is satisfied on
all path, or on one path (by checking the negation of the property),
but cannot express the mix of universal and existential path, because
*the complement formula still has a mix*. Thus, we need CTL.


The /Computation model/ pick a state, and unfold (infinite because of
left total) all transitions. It is a tree. Thus it is also called
/computation tree model/.

A /path/ is a ordered sequence of states in the computation model
(also infinite).

The connectives are different from those of LTL, where there are
X,F,G,U,W,R. The counter parts in CTL always have a A (always) or E
(exists) prefix, so:
- AX,EX
- AF,EF
- AG,EG
- AU, EU
- We don't model W and R here

The priority is similar to those of LTL.

The semantic of CTL is encoded like this. Note that instead of a path,
we are modeling the whole model, i.e. all path.
- Basic
  - $M,s \models \top: always true
  - $M,s \models \bot$: false
  - $M,s \models p$ iff $p \in L(s)$
- Simple connectives including X,G,F have intuitive semantics
- $M,s \models \phi_1 \rightarrow \phi_2$ iff $M,s \models \phi_1$ or
  $M,s \models \phi_2$. Note: this seems to be exactly the same as
  $M,s \models \phi_1 \vee \phi_2$, and is substantially different
  from that of LTL.
- Other connectives have intuitive semantics

Two CTL formula are equivalent if they have same value in *any state
in any model*. Similar to LTL:
- AF and EG are dual: $\neg AF \phi \equiv EG \neg \phi$
- EF and AG are dual: $\neg EF \phi \equiv AG \neg \phi$
- AX and EX are dual: $\neg AX \phi \equiv EX \neg \phi$
- F can still be expressed by U, no matter AF or EF:
  - $AF \phi \equiv A (\top U \phi)$
  - $EF \phi \equiv E (\top U \phi)$

According to the above equivalent classes, we can easily find the
adequate set:
- one of AX,EX
- one of EG, AF, AU
- EU (shouldn't this be one of EU,EF?)
*** Model Checking Algorithm and Fixed point
The algorithm is basically a labeling algorithm, and when the labeling
is finished, simply look into the labels for the models satisfying the
formula.

The simple cases are handled directly:
- $\top$, $\bot$, $\phi$
- EX(\phi)
- EU(\phi)
- EG(\phi) or AF(\phi)

Other connectives call the checking recursively:
- $\neg \phi$, $\phi_1 \vee \phi_2$, $\phi_1 \wedge \phi_2$
- $\phi_1 \rightarrow \phi_2$: return $\neg \phi_1 \vee \phi_2$
- All other connectives

There are two functions
- $pre_\exists(Y)$: all states /can/ a transition to Y in the next step
- $pre_\forall(Y)$: all states that /can only/ make transitions to
  Y. Since every state can make transitions, so there must be at least
  one such transition.

We also denote the set of states satisfying $\phi$ as $[[\phi]]$.

The model checking algorithm need to use fixed point to compute the
result.  Let S be a set of all states, and $|S|=n+1$, F be a function
$P(S)\rightarrow P(S)$. F is said to be /monotone/ iff $X \subset Y$
implies $F(X) \subset F(Y)$ for all subsets X and Y of S. X is called
a /fixed point/ of F iff $F(X) = X$. $F^i(X)$ means apply F i times on
X.

#+begin_quote
A monotone function always have a /least fixed point/ and a /greatest
fixed point/. If F is a monotone function, then $F^{n+1}(\emptyset)$
is the least fixed point, and F^{n+1}(S) is the greatest fixed point.
#+end_quote




** Comparison Between CTL and LTL
CTL and LTL both have expressiveness power than another. In CTL we can
quantify the path, thus very easy to see the power of CTL. But in LTL
we can express a single formula and have it valid for all path. For
example, $Fp \rightarrow Fq$ cannot be expressed in CTL.  Also, the
fairness can be specified in LTL via $GFp \rightarrow \phi$, but
cannot be specified in CTL.


* Probabilistic Model Checking
System-behavior has three basic types.
1. Deterministic where the evolution of the system from one state to
   another is determined internally. For each state, there is exactly
   one evolution.
2. Non-deterministic. The evolution of the system from one state to
   another depends on external factors, whose behavior is unknown. As
   a result, each state may evolve in many different ways. Analysis
   should consider all possibilities.
3. Probabilistic. The evolution of the system from one state to
   another depends on external factors, whose behavior is specified in
   probabilistic terms. Each state may evolve in different ways with
   different probabilities. Non-deterministic systems are /not/
   probabilistic systems where every evolution from each state is
   equally probable.

Probabilistic Kripke Structure is defined as follows (also called
/Discrete Time Markov Chain (DTMC)/):

- PS = (S, S0, T, L) 
- S:  finite set of states
- S0 \subseteq S: set of start states
- T: S X S -> [0, 1] such that
  1. \forall s. \exists s': T(s, s') > 0  
  2. \forall s. \Sum_s' T(s, s') = 1  
  3. \forall \pi: path, T(\pi[i], \pi[i+1]) depends solely on \pi[i]
- L: S -> powerset of Atomic propositions

The probability of a finite path is product of the probability of all
transitions on the path. We denote all finite paths starting from a
state $s$ as $path(s)$, then we can compute /the probability of all
finite paths from a state/, i.e. $P(path(s))$, as the sum of the
probabilities of all of them.  Inductively (really?), we have that
$Prob(Path(s)) = 1$.

/probabilistic CTL (PCTL)/. A state s satisfy $P_{<0.5}\phi$ iff the
sum of (all path from the state s satisfies $\phi$) is less than 0.5.

* Ordered Binary Decision Diagram (OBDD)

A boolean function of n arguments is a function from $\{0,1\}^n$ to
$\{0,1\}$. Such boolean functions can be modeled intuitively by truth
table, but is space-inefficient. The propositional formulas are
better, but still hard to decide equivalence (require exponential
time).

/Binary Decision Diagram (BDD)/ is a way to represent boolean
functions. It is a /Directed Acyclic Graph (DAG)/. A node is called
terminal if it has no outgoing edges. All other nodes are terminal
node. In BDD, all terminal nodes are labeled either 0 or 1. All
non-terminal nodes are labeled by a variable. Each variable node $x$
has two outgoing edges, one dashed taken when $x=0$, one solid taken
when $x=1$.

We need to reduce BDD to as simple as possible. There are three kinds
of reductions. A BDD is called /reduced/ if optimization C1-C3 cannot
be performed.
- C1: there should be exactly one 0 and 1
- C2: if both outgoing edges goes to the same node, this node should
  be removed.
- C3: if two nodes have identical subBDDs (defined as the part of BDD
  below a given node), they should be merged into one.

We say a BDD has an ordering of variable $x_1,...,x_n$ if along all
path, this order is not violated. When operations are performed on two
OBDDs, we usually require they to have /compatible variable ordering/,
i.e. the order should not conflict with each other. In general, the
ordering is very important in terms of the size of OBDD. But the book
does not mention what are the heuristics to decide the ordering.

We have the theorem that, the reduced OBDD of a function is unique (I
think given the ordering, i.e. from the original OBDD). It also means
that, if we apply the reductions C1-C3 to an OBDD until reduced, the
results are always the same, no matter what order we applied the
reduction. This is called the /canonical form/ of the OBDD.

The algorithm reduce works like this:
- Initially, assign label #0 to terminal 0, #1 to terminal 1
- From bottom to up, check
  - C2: if the node's outgoing edge points to the same label, assign
    it that label, i.e. remove it.
  - C3: if there is another node that is already labeled, and this
    node has the same two outgoing structure, use that label
  - Otherwise, assign a new label

There seems to have another algorithm apply that compose two OBDDs.



* NuSMV
** Language
A SMV model is specified by several modules, like functions. There
must be one module named =main= without formals, and is executed by
the interpreter.

Module can takes formals, which are call-by-reference when
instantiates with actual parameters. A module must be instantiated, in
VAR declaration, to be reused. It is through using the module inside
the type of variable. An optional =process= can be used here to
specify asynchronous behavior. This is deprecated, and modeling of
asynchronous will have to be resolved at a higher level. You can
reference the components using dot notation, and the variable support
very permissive forward declaration, you can use arbitrary dot
notation as long as it is valid by some declaration in some time.

Each module has several variable and defines. Variables are states. It
is declared with its type, like
- =boolean=
- =1..5=: integers must be ranged
- =array 2..5 of boolean=: array must be defined with the subscription
  range as well as inside type
- signed/unsigned word[3]: vector of bits (booleans).

However, defines are macros, substituted when appear in
expression. Thus it is real time, and can also refer to next
expression in its definition.

Each module also has a =ASSIGN= block for specifying changes. It can
be either a =init= or =next= expression. Inside the assignment, the
RHS will be either a value, or a set, which means LHS can be EITHER
ONE inside the set. =next= cannot be nested, but next can be applied
to an expression, which is syntax sugar for apply next for each
variables inside the expression.

Besides =case=, tenary operator =cond?expr:expr= can be used for
simple conditions.

FAIRNESS is used to restrict attention only to good execution paths,
i.e. the good execution paths must be available in the future
/infinitely often/.

Finally, a SPEC can be given, using !, ->, &, |, EG, EX, EF, AG, AX,
AF, EU, AU, etc.

** Interactive Run
Run interactively by =NuSMV -int=. The following commands are
available.

*** General
- help
- history
- quit
- reset
- set [name] [value]
- source <file>: execute sequences of commands from a file, separated
  by semi-colon.

*** Reading models
- read_model -i [model-file]
- show_vars: show variables and defines
- write_order -o [order-file]
- build_model
- go: equivalent to read_model, flatten_hierarchy, encode_variables,
  build_flat_model, build_model
- process_model -i [model-file]: build model and check SPEC

*** Model checking
- compute_reachable
- print_reachable_states
- check_fsm
- check_ctlspec -p "ctl-expr [IN context]"
- check_ltlspec -p "ltl-expr [IN context]"

- pick_state -i: interactively pick initial state
- simulate
- execute_traces
- goto_state
- print_current_state
- show_traces

* Spin

Running of spin.

According to the [[http://spinroot.com/spin/Man/Spin.html][man page of
spin]], running =spin xxx.pml= will run a random simulation of the
model. 
- Running options: Given =-n<number>= will set a seed,
  i.e. deterministic run. =-i= can run interactively, select choice to
  take.
- Printing options: =-c= print out graphical results. =-g= show global
  variable at each time step. =-s= and =-r= prints the send and
  receive messages. They are also included in the =-c= option.
- =-run= will generate, compile and run the verifier, and check the
  LTL formula.

[[http://spinroot.com/spin/Man/promela.html][The reference page]].
