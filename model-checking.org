#+TITLE: Model Checking

The book: cite:2004-Book-Huth-Logic

* Kripke Structure (KS)
** syntax
1. S: set of states
2. T: transitions: \subsetof SxS
   - /left total/: forall s, exists s', s,s' \in T. I.e. every state
     has an outgoing edge.
3. L: labeling function, e.g. busy, non-busy. S->P(AP): P: powerset,
   AP: set of propositions

- Computation model :: pick a state, and unfold (infinite because of
     left total) all transitions. It is a tree. Thus it is also called
     /computation tree model/.
- Path :: ordered sequence of states in the computation model (also
          infinite)
- Computation Tree Temporal Logic (CTL)

phi is the /formula/, i.e. the aV(b^c) thing, in propositional logic.

#+begin_example
\phi :: true | false |
        AP (atom proposition) |
        \not \phi | \phi \vee \phi | \phi \hedge \phi
        AX phi
        EX phi
        AF phi
        EF
        AG
        EG
        A (phi U phi)
        E (phi U phi)
#+end_example

- E: Exists a path
- A: along All path
- X: in the neXt state
- F: Finally in a state
- G: Globally in all states
- U: until
** semantic
It means, states of KS where the given CTL formula is satisfied.

Given KS M and some state s in M
- $M,s \models true$: always true
- $M,s \not\models false$
- M,s \models p iff p \in L(s) where L is the label function
- M,s \not\models \phi iff \phi \not\in L(s) ??
- M,s \models AX \phi iff \forall \pi \in Path(s) \pi[1] \models
  \phi, where Path(s) is all possible paths start from s, and \pi[i]
  means the i-th item on the path.

In temporal logic, future starts from right now. So
- $M,s \models AF \phi$, iff $\forall \pi \in Path(s), \exists i \ge 0,
  \pi[i] \models \phi$. Pay attention to the $i \ge 0$.
- $M,s \models AG \phi$, iff $\forall \pi \in Path(s), \forall i \ge 0, \pi[i] \models \phi$

- M,s \models A(\phi_1 \union \phi_2) iff there is a state that phi_2
  satisfy, the before it on the path, phi_1 always holds.
  - iff $\forall \pi \in Path(s), \exists i \ge 0, \pi[i] \models
    \phi_2 \wedge \forall j < i, \pi[j] \models \phi_1$

* NuSMV
** Language
A SMV model is specified by several modules, like functions. There
must be one module named =main= without formals, and is executed by
the interpreter.

Module can takes formals, which are call-by-reference when
instantiates with actual parameters. A module must be instantiated, in
VAR declaration, to be reused. It is through using the module inside
the type of variable. An optional =process= can be used here to
specify asynchronous behavior. This is deprecated, and modeling of
asynchronous will have to be resolved at a higher level. You can
reference the components using dot notation, and the variable support
very permissive forward declaration, you can use arbitrary dot
notation as long as it is valid by some declaration in some time.

Each module has several variable and defines. Variables are states. It
is declared with its type, like
- =boolean=
- =1..5=: integers must be ranged
- =array 2..5 of boolean=: array must be defined with the subscription
  range as well as inside type
- signed/unsigned word[3]: vector of bits (booleans).

However, defines are macros, substituted when appear in
expression. Thus it is real time, and can also refer to next
expression in its definition.

Each module also has a =ASSIGN= block for specifying changes. It can
be either a =init= or =next= expression. Inside the assignment, the
RHS will be either a value, or a set, which means LHS can be EITHER
ONE inside the set. =next= cannot be nested, but next can be applied
to an expression, which is syntax sugar for apply next for each
variables inside the expression.

Besides =case=, tenary operator =cond?expr:expr= can be used for
simple conditions.

FAIRNESS is used to restrict attention only to good execution paths,
i.e. the good execution paths must be available in the future
/infinitely often/.

Finally, a SPEC can be given, using !, ->, &, |, EG, EX, EF, AG, AX,
AF, EU, AU, etc.

** Interactive Run
Run interactively by =NuSMV -int=. The following commands are
available.

*** General
- help
- history
- quit
- reset
- set [name] [value]
- source <file>: execute sequences of commands from a file, separated
  by semi-colon.

*** Reading models
- read_model -i [model-file]
- show_vars: show variables and defines
- write_order -o [order-file]
- build_model
- go: equivalent to read_model, flatten_hierarchy, encode_variables,
  build_flat_model, build_model
- process_model -i [model-file]: build model and check SPEC

*** Model checking
- compute_reachable
- print_reachable_states
- check_fsm
- check_ctlspec -p "ctl-expr [IN context]"
- check_ltlspec -p "ltl-expr [IN context]"

- pick_state -i: interactively pick initial state
- simulate
- execute_traces
- goto_state
- print_current_state
- show_traces
