#+TITLE: StumpWM

This is an excellent Window Manager! It has an info document ready in Emacs.

* TMP
- mode-line add group information
- like ~C-e~ for opening a browser
- rule based window


** A better way to install stumpwm
- This seems a better way to install stumpwm =(ql:quickload
  "stumpwm")=
But this require the .xinitrc to be
#+BEGIN_EXAMPLE
exec sbcl --load /path/to/startstump
#+END_EXAMPLE
with startstump
#+BEGIN_EXAMPLE
(require :stumpwm)
(stumpwm:stumpwm)
#+END_EXAMPLE
** Live Debugging
To debug it live, you might need this in .stumpwmrc:
#+BEGIN_SRC lisp
  (in-package :stumpwm)

  (require :swank)
  (swank-loader:init)
  (swank:create-server :port 4004
                       :style swank:*communication-style*
                       :dont-close t)
#+END_SRC

The above wont work unless swank is installed:
#+BEGIN_EXAMPLE
(ql:quickload "swank")
#+END_EXAMPLE

The port is actually interesting. Here it is set to 4004, and the
slime in Emacs defaults to 4005, thus they wont mess up. The trick to
connect to stumpwm is to use =slime-connect= and put 4004 for the port
prompt.

So acutally if you just want to live debug, just install swank and
#+BEGIN_EXAMPLE
(require 'swank)
(swank:create-server)
#+END_EXAMPLE

# (ql:quickload :swank)
Note lastly that to install using quickload, you need permission. So

#+BEGIN_EXAMPLE
sudo sbcl --load /usr/lib/quicklisp/setup
#+END_EXAMPLE

To test if it works, you should be able to switch to stumpwm namespace
and operate the window, like this:

#+BEGIN_EXAMPLE
(in-package :stumpwm)
(stumpwm:select-window-by-number 2)
#+END_EXAMPLE


* Installation
In order to use =ttf-fonts= module, the lisp =clx-truetype= package needs to be installed.
Install the slime IDE for emacs, install quicklisp, then install it using quicklisp.
Follow the description in lisp wiki page.


* General

Same as ratpoison:
- ~C-t C-h~: show help
- ~C-t !~: run shell command
- ~C-t c~ terminal
- ~C-t e~: open emacs!
- ~C-t ;~: type a command
- ~C-t :~: eval
- ~C-t C-g~: abort
- ~C-t a~: display time
- ~C-t t~: send C-t
- ~C-t m~: display last message

** Get Help
- ~C-t h k~: from key binding to command: =describe-key=
- ~C-t h w~: from command to key binding: =where-is=
- ~C-t h c~: describe command
- ~C-t h f~: describe function
- ~C-t h v~: describe variable

- =mode-line=: start mode-line

* Window
- ~C-t n~
- ~C-t p~
- ~C-t <double-quote>~
- ~C-t w~ list all windows
- ~C-t k~ kill current frame (K to force quit)
- ~C-t #~ toggle mark of current window


* Frame
- ~C-t s~: hsplit
- ~C-t S~: vsplit
- ~C-t Q~: kill other frames, only retains this one
- ~C-t r~: resize, can use =C-n=, =C-p= interactively
- ~C-t +~: balance frame
- ~C-t o~: next frame
- ~C-t -~: show desktop

Other commands
- =remove-split= :: to remove the current frame
- =fclear= :: clear the current frame, show the desktop

To resize frames interactively, =C-t r= and then use the arrows.

* Groups
Shortcuts:
- ~C-t g c~: create: =gnew=. Also available for float: =gnew-float=
- ~C-t g n~: next
- ~C-t g o~: =gother=
- ~C-t g p~: previous
- ~C-t g <double-quote>~: interactively select groups: =grouplist=
- ~C-t g k~: kill current group, move windows to next group: =gkill=
- ~C-t g r~: rename current group: =grename=
- ~C-t G~: display all groups and their windows
- ~C-t g g~: show list of group
- ~C-t g m~: move current window to group X
- ~C-t g <d>~: go to group <d>


* Configuration

#+BEGIN_EXAMPLE
(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "C-z") "echo Zzzzz...")
#+END_EXAMPLE
