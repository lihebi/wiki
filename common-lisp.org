#+TITLE: Common Lisp

* Installation
** quicklisp
#+BEGIN_SRC lisp
;; sbcl --load /path/to/quicklisp.lisp
(load "/path/to/quicklisp.lisp")
(quicklisp-quickstart:install)

;; setting up
(load "~/quicklisp/setup.lisp")
;; load quicklisp when you start lisp
(ql:add-to-init-file)

;; install/remove a software
(ql:quickload "clx-truetype")
(ql:uninstall "clx-truetype")

;; query installed packages
(ql:system-apropos "substring")

;; updating all packages
(ql:update-all-dists)
;; update quicklisp itself
(ql:update-client)
#+END_SRC


A list of packages used:
- clx-truetype :: for stumpwm ttf-font
- zpng :: for stumpwm screenshot
** packages
- =cl-quicklisp=



** org babel
first, start =M-x slime=, then you can evaluate this:

#+name: hello-world
#+header: :var message="Hello World!"
#+begin_src lisp
  (princ message)
#+end_src

** Slime
- slime (emacs IDE)
- sbcl ("lisp" executer)
- cl-quicklisp (package manager)

In emacs: start slime
#+BEGIN_EXAMPLE
CL-USER> (load "/path/to/quicklisp.lisp")
CL-USER> ;; follow screen command to install
CL-USER> (load "~/quicklisp/setup.lisp") ;; load it

CL-USER> (ql:add-to-init-file) ;; add to sbcl's init file

CL-USER> (ql:quickload "clx-truetype") ;; download this package. Packages will be put into "~/quicklisp/xxx/dist"

CL-USER> (ql:update-all-dists) ;; update
CL-USER> (ql:update-client) ;; update quicklisp itself
#+END_EXAMPLE

The staff added into =.sbclrc=:
#+BEGIN_EXAMPLE
  ;;; The following lines added by ql:add-to-init-file:
  #-quicklisp
  (let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
  (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
  (load quicklisp-init)))
#+END_EXAMPLE

*** Commands

| command   | description             |
|-----------+-------------------------|
| C-c C-d d | slime-describe-symbol   |
| C-c C-d f | slime-describe-function |
| M-TAB     | slime-complete-symbol   |

In a buffer of mode =lisp=, =C-c C-c= will evaluate the =defun= around cursor.
=C-c C-z= will switch to the =slime= buffer.


* Reference
Common Lisp the language: http://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/cltl2.html

** Truth, falsehood, equality
- =nil= is false, everything else is true
- =nil= is both an atom and a list. =()= is exactly the same as =nil=

- =EQ= tests for object identity. Two objects are =EQ= if they're identical.
  It CANNOT compare numbers and characters, which gives undefined behavior.
- =EQL= is similar to =EQ= except that it guarantees the same numeric or character value is equal. =(eql 1 1)= is =t=.
- =EQ= is more efficient than =EQL= because it does not need to check whether it is numeric or character.
  But =EQL= has less trouble to understand .. so use =EQL= when possible.
- =EQUAL= is looser than =EQL=. It consider strings equivalent if they contain the same characters.
- =EQUALP= is even looser. For example, it consider two strings are equal case-insensitively. NEVER use this.
** Function
#+BEGIN_SRC lisp
  (defun name (a b
               &optional op1 (op2 def-value) (op3 def-value op3-supplied-p)
               &rest rests
               &key k1 (k2 def-value k2-supplied-p) ((:kkkkk3 k3) def-value k3-supplied-p))
    (body-forms))
#+END_SRC

First required arguments are consumed, then the optional arguments, then the rest, finally the keyword arguments.
optional arguments can have default values (which defaults to nil), and a variable to indicate whether it is supplied.
The rests is a list.
keyword arguments are the same as optional arguments, except it must be supplied by keyword.
It can be rebound to a simpler name to be used in the body.

Never mix (optional, key).
You can mix rest and key, but the behavior is, after matching all required and optional, everything are bound to rest.
Then appropriate ones are ALSO bound to keyword arguments.

The return value of function is typically the last expression.
But you can explicit return from a function by using =RETURN-FROM SYMBOL body= special form.
Symbol is the function name to return, and it is not evaluted.
You must provide the function in order to return, which makes it not frequently used.

The function object can be obtained by ='#=.
One can apply the object in two ways:
- =FUNCALL= :: the first is the function object, the rests are arguments
- =APPLY= :: the first is the function object, then a list of arguments.
  The list can be looser, e.g. some arguments, as long as the last one is a list.

** Variable
The symbol is a reference of the object.
Assigning to the symbol will create another reference to another object.
But, if the object is mutable, then assign to the reference will change the object.

Function parameters are reference.
So if the object is mutable, then assigning to the parameter will change the referenced object.

Global variable can be defined by =defvar= and =defparameter=. Naming convention is put =*= surrounds it.

#+BEGIN_EXAMPLE
defparameter *varname* init-value "Optional document string"
defvar *varname* optional-init-value "optional document string"
#+END_EXAMPLE

The difference (Prefer =defvar=):
- =defparameter= will always assign the initial value
- =defvar= will do so only if the variable is not defined;
  =defvar= can also be used without initial value, the variable will be unbound.

Although the global variable can be referred at any place, the binding is still quite lexical regarding to the binding form.
E.g, the let binding can rebind the global variable, and everything before the return of let form sees this binding.
After the return, the binding fall back to the previous binding.
This is good because when you want to temporary change the =*standard-output*= to a file,
you don't need to have to remember to change it back.

This also means, assign to global variable only modify the specific binding, while the binding on the stack does not change.
Lisp did this by looking up the name of variable: if it is declared by =defvar= or =defparameter=,
it will creates dynamic binding.

=defconstant +name+ init-value "optional document string"= is used to declare constant. Use =+= surrounds it.
It is possible to redefine the constant using =defconstant= again, but the behavior is undefined.
E.g. the code refer to it might need to be reevaluated to see the update.
So, do NOT redefine a constant, otherwise it is not a constant, use =defparameter= instead.

Assigning a value to a binding is:
1. change the binding only, do not change other hidden bindings for this symbol
2. do not change the value object the binding refers to

The general assignment operator is =setf (place value)+=.
When assigning a binding, it will call =setq= (but don't call =setq= directly!), and returns the newly assigned value.
In the document, a /SEFTable/ thing is suitable to be a =setf= /place/.

To make the code more concise, some "f-family" are invented.
- =(incf x)= :: =(setf x (+ x 1))=
- =(decf x)= ::
- =(incf x 10)= ::

here =incf= and =decf= modifies the argument, so they are called /modify macros/.
Other /modify macros/:
- =push=, =pop=, =pushnew=
- =rotatef=, =shiftf=
  - =(roratef a b)= is equal to =(let ((tmp a)) (setf a b b tmp) nil)=
  - =(shiftf a b 10)= shifts all the values left, equals to =(let ((tmp a)) (setf a b b 10) tmp)=

** Control Structure
*** Conditional
- =(if condition then-form [else-form])=
- =(progn forms*)=
- =(when cond forms*)=
- =(unless cond forms*)=
- =(cond (test-1 form*) (test-2 form*))=:
  The test predicates are evaluated one by one until one to =t=, then evaluate the body form, and return the last.
  To have a default, put a =t= as the last condition.

*** Looping
- =(dolist (var list-form) body-form*)=
- =(dotimes (var count-form) body-form*)=: from 0 to the value of count-form-1, inclusively
- =(do (var-def*) (end-test-form result-form*) statements*)= where the var-def is =(var init-form step-form)=
  - =(do ((i 0 (1+ i)))   ((> i 4))     (print i))

** Types
*** numbers
- =#b010101=
- =#xaf08=
rounding:
- =floor= :: toward negative infinity
- =ceiling= :: toward positive infinity
- =truncate= :: toward 0
- =round= :: to nearest integer
modulus
- =mod= :: modular
- =rem= :: remainder
min,max
- =min=
- =max=
predicates
- =zerop=
- =minusp=
- =plusp=
- =evenp=
- =oddp=
- ~/=~

*** characters

| numeric analog | case-sensitive | case-insensitive | string case sens | string case insens |
|----------------+----------------+------------------+------------------+--------------------|
| ~=~            | ~char=~        | =CHAR-EQUAL=     | ~string=~        | =string-equal=     |
| ~/=~           | ~char/=~       | =CHAR-NOT-EQUAL= | ~string/=~       | =string-not-equal= |
| ~<~            | ~char<~        | =CHAR-LESSP=     | ~string<~        | =string-lessp=     |

** Destructive
There are two types of destructive functions:
- /for-side-effect/: typically use =setf=
- /recycling operation/

The recycling operations are typically those with =n= as prefix.
80 percent of the use cases are =PUSH/NREVERSE= and =SETF/DELETE=.

#+BEGIN_SRC lisp
(defun upto (max)
  (let ((result nil))
    (dotimes (i max)
      (push i result))
    (nreverse result)))
#+END_SRC

#+BEGIN_SRC lisp
(setf foo (delete nil foo))
#+END_SRC

=sort= is also destructive, so use it on a copy of the list. Be sure to assign it back to the variable.

#+BEGIN_SRC lisp
(defparameter *list* (list 4 3 2 1))
(sort *list* #'<) ;; (1 2 3 4)
*list* ;; (4)
;; so shoud use:
(setf *list* (sort *list* #'<))
#+END_SRC

* Style Guide
Reference: http://people.ace.ed.ac.uk/staff/medward2/class/moz/cm/doc/contrib/lispstyle.html

- if return multiple values, use =values= instead of a list; if return no values, use =(values)=
- =+global-constant+=
- =*global-variable*=
- use =setf= instead of =setq=.
  This is more general. This includes /variables, array locations, list elements, hash table entries, structure fields, and object slots/.
- Remember that append copies its arguments.
  Avoid using append inside a loop to add elements to the back of a list.
  Use the collect clause in loop, or push elements onto a list and then nreverse the list to return the original ordering.

Bad:
#+BEGIN_SRC lisp
(let ((result ()))
  (dolist (x list)
    (setf result (append result (list x))))
  result)
#+END_SRC
Better:
#+BEGIN_SRC lisp
(let ((result ()))
  (dolist (x list)
    (push x result))
  (nreverse result))
#+END_SRC
Best:
#+BEGIN_SRC lisp
  (loop for x in list collect x)
#+END_SRC

- Remember that copy only copies the outer-most level of a list. Use copy-tree to copy all levels of a list.
Lisp programmers often use the functions and and or to implement simple conditional evaluation. For example,

#+BEGIN_SRC lisp
  ;; use
  (and x (setf y t))
  ;; instead of
  (when x
    (setf y t))
  ;; use
  (or x (setf y t))
  ;; instead of
  (unless x
    (setf y t))
#+END_SRC

* Practical Common Lisp
http://www.gigamonkeys.com/book/
** CD database
#+BEGIN_SRC lisp
  ;; (HEBI: hello world, testing environment)
  (defun hello-world ()
    (format t "Hello, world!"))

  ;; this function makes the cd
  (defun make-cd (title artist rating ripped)
    ;; (HEBI: the list created is a property list. The :key is the key, and followed by the value)
    (list :title title :artist artist :rating rating :ripped ripped))

  ;; make a cd record
  (make-cd "Roses" "Kathy Mattea" 7 t)

  ;; (HEBI: the *xx* is the convention for a global variable)
  (defvar *db* nil)

  ;; (HEBI: The push will push the cd onto the global *db*)
  (defun add-record (cd) (push cd *db*))



  ;; add some records to the database
  (add-record (make-cd "Roses" "Kathy Mattea" 7 t))
  (add-record (make-cd "Fly" "Dixie Chicks" 8 t))
  (add-record (make-cd "Home" "Dixie Chicks" 9 t))


  (defun dump-db ()
    ;; (HEBI: dolist)
    (dolist (cd *db*)
      ;; (HEBI: format)
      ;; the first is the output stream, with t as standard output
      ;; The ~a directive is the aesthetic directive; it means to consume one argument and output it in a human-readable form
      ;; It will work for both keyword and value
      ;; ~t is for tabulating. ~10t means emit enough spaces to move to the tenth column
      ;; ~{ and ~} will make format: 1. require the next argument to be a list 2. consume the elements of the list for each ~a inside them
      ;; ~% emit a new line
      (format t "~{~a:~10t~a~%~}~%" cd)))

  ;; (HEBI: note: the above function can use format to iterate the whole *db* list)
  (defun dump-db-2 ()
    (format t "~{~{~a:~10t~a~%~}~%~}" *db*))


  (defun prompt-read (prompt)
    ;; the *query-io* is a global variable that contains the input stream connected to the terminal
    (format *query-io* "~a: " prompt)
    ;; (HEBI: flush)
    (force-output *query-io*)
    ;; read-line will read the string without the trailing newline
    (read-line *query-io*))

  (defun prompt-for-cd ()
    (make-cd
     ;; read a string
     (prompt-read "Title")
     (prompt-read "Artist")
     ;; (HEBI: parse the string to int)
     ;; if nil, the parse-integer will emit error. :junk-allowed t will make it silent
     ;; the surrounding "or" will make a default value of 0 instead of nil
     (or (parse-integer (prompt-read "Rating") :junk-allowed t) 0)
     ;; (HEBI: y-or-n-p) is a builtin function. It is very robust, in the sense that it will reopen the prompt if answer is not yY or nN.
     (y-or-n-p "Ripped [y/n]: ")))

  (defun add-cds ()
    (loop (add-record (prompt-for-cd))
       ;; this loop will end if the another query is answered as n
       (if (not (y-or-n-p "Another? [y/n]: ")) (return))))

  (defun save-db (filename)
    ;; (HEBI: open the file and store the stream) as variable "out"
    ;; filename is the filename string
    ;; direction defaults to :input, so if want output, need to specify
    ;; if-exists, overwrite it
    (with-open-file (out filename
                         :direction :output
                         :if-exists :supersede)
      ;; this is used to ensures that certain variables that affect the behavior of print are set to their standard values.
      ;; be sure to use the same macro when reading the data back
      (with-standard-io-syntax
        ;; (HEBI: directly print the *db* to the stream)
        ;; lisp will print the object out in the form that it can be read back
        (print *db* out))))

  ;; now you can save it
  (save-db "~/my-cds.db")

  ;; load the db back
  (defun load-db (filename)
    (with-open-file (in filename)
      (with-standard-io-syntax
        ;; use read to (HEBI: read everything from the stream in)
        ;; use (HEBI: setf) to set result of the read to the *db* variable
        (setf *db* (read in)))))

  ;; query
  (defun select-by-artist (artist)
    ;; make a copy of *db* by removing if not the predicate, and return that copy
    (remove-if-not
     ;; (HEBI: getf can get the value of a plist by the key)
     ;; #' is the quote for function
     #'(lambda (cd) (equal (getf cd :artist) artist))
     ,*db*))

  (defun select (selector-fn)
    (remove-if-not selector-fn *db*))

  (defun artist-selector (artist)
    #'(lambda (cd) (equal (getf cd :artist) artist)))

  ;; use this by:
  (select (artist-selector "Dixie Chicks"))


  ;; keyword argument, can be called by (func :key value)
  ;; default value using (var default)
  ;; (var default var-p) var-p is used to check whether the argument is supplied or not
  (defun where (&key title artist rating (ripped nil ripped-p))
    #'(lambda (cd)
        (and
         (if title    (equal (getf cd :title)  title)  t)
         (if artist   (equal (getf cd :artist) artist) t)
         (if rating   (equal (getf cd :rating) rating) t)
         (if ripped-p (equal (getf cd :ripped) ripped) t))))

  ;; use by:
  (select (where :rating 10 :ripped nil))

  (defun update (selector-fn &key title artist rating (ripped nil ripped-p))
    (setf *db*
          ;; (HEBI: mapcar) apply the function to each element of the list, and return the list of results
          (mapcar
           #'(lambda (row)
               (when (funcall selector-fn row)
                 ;; this (setf (getf) xx) staff is magic. setf has nothing to do with getf
                 (if title    (setf (getf row :title) title))
                 (if artist   (setf (getf row :artist) artist))
                 (if rating   (setf (getf row :rating) rating))
                 (if ripped-p (setf (getf row :ripped) ripped)))
               row) *db*)))

  ;; this can be called:
  (update (where :artist "Dixie Chicks") :rating 11)

  (defun delete-rows (selector-fn)
    (setf *db* (remove-if selector-fn *db*)))

  ;; OK, refactoring time
  ;; Problems for where:
  ;; the if ... checking inside "and" is almosts the same, that's duplicate code
  ;; for the querys that do not have other fields, we don't want to check those fields, to avoid overhead

  ;; The solution is the MACRO, the code generator of lisp

  ;;; (HEBI: Macros, all kinds of quoting)
  (defun make-comparison-expr (field value)
    ;; ' will leave the expression unevaluated.
    ;; ` will do the same thing, and it can do one more: can evaluate part of it
    ;; , before a subexpression will evalute that
    `(equal (getf cd ,field) ,value))

  (defun make-comparisons-list (fields)
    (loop while fields
       ;; using loop facility, make comparison expr for all the fields
       ;; pop will pop the first of the list
       collecting (make-comparison-expr (pop fields) (pop fields))))

  ;; wrap comparison expr into and clause
  (defmacro where (&rest clauses)
    ;; ,@() will evaluate the subexpression, and splice the resulting list into the surrounding list
    `#'(lambda (cd) (and ,@(make-comparisons-list clauses))))

  ;; this can check what this macro expanded to
  (macroexpand-1 '(where :title "Give Us a Break" :ripped t))

  ;; Final test:
  (select (where :title "Give Us a Break" :ripped t))
#+END_SRC


** Unit Test Framework


#+BEGIN_SRC lisp
  ;; the design goal of a unit test framework:

  ;; - easy to add new test
  ;; - easy to run tests
  ;; - easy to track down test failures


  ;; (HEBI: report test name)
  (defmacro deftest (name parameters &body body)
    "Define a test function. Within a test function we can call
     other test functions or use 'check' to run individual test
     cases."
    `(defun ,name ,parameters
       ;; (HEBI: hierarchy test name report)
      (let ((*test-name* (append *test-name* (list ',name))))
        ,@body)))


  (defmacro with-gensyms ((&rest names) &body body)
    ;; gensym generate a unique symbol name that the reader has never seen
    ;; the reason to use such unique name is to avoid leaking of information
    `(let ,(loop for n in names collect `(,n (gensym)))
       ,@body))

  (defvar *test-name* nil)


  (defmacro combine-results (&body forms)
    "Combine the results (as booleans) of evaluating 'forms' in order."
    (with-gensyms (result)
      `(let ((,result t))
        ,@(loop for f in forms collect `(unless ,f (setf ,result nil)))
        ,result)))

  ;; this will generate
  ;; (let ((result t))
  ;;   (unless (foo) (setf result nil))
  ;;   (unless (bar) (setf result nil))
  ;;   (unless (baz) (setf result nil))
  ;;   result)

  (defun report-result (result form)
    "Report the results of a single test case. Called by 'check'."
    (format t "~:[FAIL~;pass~] ... ~a: ~a~%" result *test-name* form)
    result)


  (defmacro check (&body forms)
    "Run each expression in 'forms' as a test case."
    `(combine-results
      ,@(loop for f in forms collect `(report-result ,f ',f))))


  ;; usage example:
  (deftest test-+ ()
    (check
      (= (+ 1 2) 3)
      (= (+ 1 2 3) 6)
      (= (+ -1 -3) -4)))
#+END_SRC
