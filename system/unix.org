#+TITLE: Unix Programming
References
- https://www.gnu.org/software/libc/manual/html_node/index.html

* Tmp

** poll - input/output multiplexing
#+BEGIN_SRC C
int poll(struct pollfd fds[], nfds_t nfds, int timeout)
#+END_SRC

** sigaction
#+BEGIN_SRC C
  // handler must be void (*) (int)
  void handle_signal(int signal) {
    // should be alarm
    if (signal != SIGALRM) {
      std::cerr << "Wrong signal: " << signal << "\n";
    }
  }
  int main() {
    struct sigaction sa;
    sa.sa_handler = &handle_signal;
    sigaction(SIGALRM, &sa, NULL);
    ualarm(timeout_usec, 0);
  }
#+END_SRC
** execvp
** timeradd
#+BEGIN_SRC C
void timeradd(struct timeval *a, struct timeval *b,
              struct timeval *res);
void timersub(struct timeval *a, struct timeval *b,
              struct timeval *res);
void timerclear(struct timeval *tvp);
int timerisset(struct timeval *tvp);
int timercmp(struct timeval *a, struct timeval *b, CMP);
#+END_SRC

- timeradd: res = a+b
- timersub: res = a-b
** kill
#+BEGIN_SRC C
int kill(pid_t pid, int sig)
#+END_SRC
