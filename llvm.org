#+TITLE: LLVM

llvm version used: 3.9.0svn

Some useful manuals:
- Manual: http://llvm.org/docs/ProgrammersManual.html
- IR Reference: http://llvm.org/docs/LangRef.html
- Pass: http://llvm.org/docs/WritingAnLLVMPass.html
- Source Level Debugging: http://llvm.org/docs/SourceLevelDebugging.html
* Build and install LLVM system

#+begin_src shell
svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm
cd llvm/tools
svn co http://llvm.org/svn/llvm-project/cfe/trunk clang
cd llvm/projects
svn co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt
cd ../..
mkdir build
#+END_SRC

Using make
#+BEGIN_SRC shell
cmake -G "Unix Makefiles" ../llvm
make
make install
#+end_src

Or using Ninja

#+BEGIN_EXAMPLE
cmake -G Ninja ..
ninja
ninja install
#+END_EXAMPLE
* try the llvm toolchain

- ~clang --help~
- ~clang file.c -fsyntax-only~ check for correctness
- ~clang file.c -S -emit-llvm -o -~ print out unoptimized llvm code
- ~clang file.c -S -emit-llvm -o - -O3~
- ~clang file.c -S -O3 -o -~ output native machine code

from http://llvm.org/docs/GettingStarted.html

Use the following code to test
#+begin_src C
#include <stdio.h>
int main() {
  printf("hello world\n");
  return 0;
}
#+end_src

It can be used just as gcc:
#+BEGIN_EXAMPLE
# one way to run
clang hello.c -o hello
./hello
#+END_EXAMPLE

Compile into llvm bitcode:
#+BEGIN_EXAMPLE
clang -O3 -emit-llvm hello.c -c -o hello.bc
#+END_EXAMPLE

Bit code can be inspected by converting back to IR:
#+BEGIN_EXAMPLE
# look at the assemble code
llvm-dis < hello.bc | less
#+END_EXAMPLE

Bitcode can be run directly:
#+BEGIN_EXAMPLE
lli hello.bc
#+END_EXAMPLE

Alternatively, you can compile LLVM bitcode into assembly file,
then assemble and run it
#+BEGIN_EXAMPLE
llc hello.bc -o hello.s
gcc hello.s -o hello.native
./hello.native
#+END_EXAMPLE

* Use the framework
** Project setup
project directory should look like this
#+BEGIN_EXAMPLE
pass-project/CMakeLists.txt
pass-project/mypass/CMakeLists.txt
pass-project/mypass/MyPass.cpp
#+END_EXAMPLE

The top level CMakeLists.txt will configure the environment,
including finding the LLVM package
#+begin_src cmake
find_package(LLVM REQUIRED CONFIG)

add_definitions(${LLVM_DEFINITIONS})
include_directories(${LLVM_INCLUDE_DIRS})

add_definitions(-std=c++11) # patch: used c++ 11
# patch: I didn't compile LLVM with rtti,
# so I need to disable rtti when compiling pass
# or I will get error when opt -load my pass
SET(CMAKE_CXX_FLAGS "-Wall -fno-rtti")

add_subdirectory(hellopass)
#+end_src

The sub-directory CMakeLists.txt file will tell the pass source files
#+begin_src cmake
add_library(HebiPass MODULE MyPass.cpp)
#+end_src

The pass source file should look like this:
#+begin_src C++
#include "llvm/Pass.h"
#include "llvm/IR/Function.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

namespace {
  struct Hello : public FunctionPass {
    static char ID;
    Hello() : FunctionPass(ID) {}
    bool runOnFunction(Function &F) override {
      errs() << "Hello: ";
      errs().write_escaped(F.getName()) << "\n";
      return false;
    }
  };
}
char Hello::ID = 0;
static RegisterPass<Hello> X("hello", "Hello World Pass", false, false);
#+end_src

Compile it into the shared library.
To run it
1. first load the library by =-load /path/to/so/file=.
2. =-hello= means to run this path.
   The name is given in the source file by =RegisterPass= class.

#+begin_src shell
cmake .
make # output mypass/libHebiPass.so
opt -load ./mypass/libHebiPass.so -hello < hello.bc
#+end_src

It first load the library

** Passes
*** Various passes
All these functions return false indicating they do not modify the code,
true otherwise.
#+BEGIN_SRC C++
class ModulePass {
virtual bool runOnModule(Module &M) = 0;
}
class FunctionPass {
virtual bool runOnFunction(Function &F) = 0;
}
class BasicBlockPass {
virtual bool runOnBasicBlock(BasicBlock &BB) = 0;
}
#+END_SRC
*** register a pass
The four parameters:
1. command line option to invoke the path (=-hello=)
2. Help message
3. If a pass walks CFG without modifying it then the third argument is set to true;
4. if a pass is an analysis pass,
   for example true for dominator tree pass


#+BEGIN_SRC C++
  static RegisterPass<Hello> X("hello", "Hello World Pass",
                               false /* Only looks at CFG */,
                               false /* Analysis Pass */);
#+END_SRC
*** Pass Interaction
=MyPass::getAnalysisUsage= will set the required passes.
It also tells what information is modified (or preserved) by this pass.
#+BEGIN_SRC C++
void MyPass::getAnalysisUsage(AnalysisUsage &AU) const {
  AU.setPreservesAll();
  // AU.setPreservesCFG();
  AU.addRequired<LoopInfoWrapperPass>();
}
#+END_SRC
Inside that Pass, you can use =getAnalysis= to get /that pass/ itself.
In this example, =getLoopInfo= is a method of =LoopInfoWrapperPass=.

#+BEGIN_SRC C++
bool MyPass::runOnFunction(Function &F) {
// this must be in the Pass class
  LoopInfo &LI = getAnalysis<LoopInfoWrapperPass>().getLoopInfo();
  //...
}
#+END_SRC

** LLVM template
=isa=:
#+BEGIN_SRC C++
if (isa<Constant>(V) || isa<Argument>(V) || isa<GlobalValue>(V))
    return true;
#+END_SRC
=cast=: This is a /checked cast/. If the cast is not valid, assertion failure.
#+BEGIN_SRC C++
cast<Instruction>(V)->getParent()
#+END_SRC
=dyn_cast=: This is a /checking cast/. If not valid, NULL pointer is returned.
#+BEGIN_SRC C++
if (AllocationInst *AI = dyn_cast<AllocationInst>(Val)) {}
#+END_SRC
** Values
*** Function
Iterating basic blocks:
#+BEGIN_SRC C++
// func is a pointer to a Function instance
for (Function::iterator it = func->begin(), end = func->end(); it != end; ++it) {
  BasicBlock *bb = &*i;
}
#+END_SRC
Iterating instructions directly:
#+BEGIN_SRC C++
// f is a pointer to a Function instance
for (inst_iterator it=inst_begin(f), end=inst_end(f);it!=end;++it) {
  Instruction *inst = &*it;
}
#+END_SRC


*** BasicBlock
#+BEGIN_SRC C++
// blk is a pointer to a BasicBlock instance
for (BasicBlock::iterator it=blk->begin(), end=blk->end();it!=end;++it) {
  Instruction *inst = &*it;
}
#+END_SRC

** User
Get users of a value:
#+BEGIN_SRC C++
  Function *F;
  for (User *U : F->users()) {
    if (Instruction *Inst = dyn_cast<Instruction>(U)) {
      errs() << "F is used in instruction:\n";
      errs() << *Inst << "\n";
    }
#+END_SRC
Get used values of an instruction:
#+BEGIN_SRC C++
Instruction *pi;
for (Use &U : pi->operands()) {
  Value *v = U.get();
}
#+END_SRC

** CFG
CFG consists of basic blocks.

#+BEGIN_SRC C++
#include "llvm/Support/CFG.h"
BasicBlock *BB = ...;

for (pred_iterator PI = pred_begin(BB), E = pred_end(BB); PI != E; ++PI) {
  BasicBlock *Pred = *PI;
}
#+END_SRC
