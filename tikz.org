#+TITLE: Tikz

* Code Structure
First, use the package
#+BEGIN_SRC latex
  \usepackage{tikz}
#+END_SRC

Then load libraries
#+BEGIN_SRC latex
  \usetikzlibrary{shapes.multipart}
#+END_SRC

Optionally some settings (TODO). Except =\tikzset= command, all other
command should be put inside tikzpicture.
#+BEGIN_SRC latex
  \tikzset{>=latex}
  \tikzset{grid/.style={gray,very thin,opacity=1}}
#+END_SRC


To start a tikzpicture, you start the ={tikzpicture}= environment. It
is suitable to be put inside a ={figure}= env. This also means, if it
is not put inside a figure, it can actually be used as an inline
image. The baseline is the center of current line, and you can use
=/tikz/baseline= option to lower or raise it. This option is evaluted
at the end of drawing, thus have access to the node names defined. It
can also access the outmost =current bounding box=.
#+BEGIN_SRC latex
  \begin{figure*}[ht]
    \centering
    \begin{tikzpicture}[options]
    \end{tikzpicture}
    \caption{}
    \label{}
  \end{figure*}
#+END_SRC

=\tikz= command; is the same as begin and end =tikzpicture=, and put
command inside. At the end of this environment, tikz makes a guess
about the bounding box, which is updated whenever it encounters a
coordinate. This may be imprecise.

Finally, the background is transparent. In order to set to something
else, you need the =background= package.

# The most common errors for tikz are:
# - miss semicolon
# - miss curly braces
# - miss include tikz library
* Parameters (options)
The options are the same as using =\tikzset{options}=. Sometimes there
needs not a value, and it is interpreted like this:
- If key is a color, ~color=key~ is processed
- if key contains a /dash/, ~arrows=key~ is processed
- if key is a name of a shape, ~shape=key~ is processed.

They are specified in =key=value= pairs.

- line width
- color
** Scope
Parameters can have scope. It is introduced by ={scope}= invironment,
taking the parameters as options,
i.e. ~\begin{scope}[key=value]~. Scopes can be nested, and have
lexcial scope. The top level ={tikzpicture}= env also acts like a
scope.

There's also a =every scope= option to install styless for every
scope.

The =scopes= package provide an easier way to specify scopes, using
just ={[options] ...}=. This is pretty useful for inside-path
scoping. One line scope command is also available as
=\scoped[options]<path command>=.

** Styles
Another way to group code together is to define a style. Like =help
lines= style. Styles are defined as an option, e.g.
#+BEGIN_EXAMPLE
my style/.style={draw=red, fill=red!20}
#+END_EXAMPLE
The =.style= means "these keys should not be applied immediately, but
rather a definition". Later reference to it is same as written the key
values literally.

There seems not to be a way to inherit a style, but rather, you can
~.append style~. The appended style is added to the end, and the last
style will win. There's also a ~.prefix style~ but not useful in this
case. The content of style can be parameterized, by =#n= where n
starts from 1. It seems that it will be replaced literally.

#+BEGIN_SRC latex
outline/.style={draw=#1, fill=#1!50},
outline/.default=black
#+END_SRC

Note 2 things:
1. the lexer is actually pretty good
2. can use default value (s?)

Use it as ~outline=blue~

* Coordinates
The general syntax is
#+BEGIN_EXAMPLE
([options] <coordinate spec>)
#+END_EXAMPLE

Options are optional, and coordinate spec can be any one of the
system. The options includes
- xshift=3cm
- shift=(x,y)

The Systems. /Inside/ each value, the arithmetic operations can be
used. All numbers can accept the following unit (pt, cm, TODO), and if no unit
is provided, it uses the coordinate system setting.

- =(x,y)=: xy-corredinate
- =(30:1cm)=: 1cm in the 30 degress direction.
- =(x,y,z)=: 3d

Node is also often used for specify a coordinate. The implicit way is
- (a)
- (a.north)
- (a.10): 10 degree angle
** Intersection

Yet another way is to use /perpendicular/ coordinate system. This
calculate the intersection.
- (2,1 |- 3,4): yield 2,4
- (3,4 -| 2,1)

A more general way to find intersection of two pathes is to use
=intersections= library (TODO).

** Relative position
- =++(x,y)=: You can also use relative position.  means shift to the
  /last point/ used.
- =+(x,y)=: similar to ++ but does not change the /last point/

Note that the scoping will not localize the position, thus to make a
local part "local", you can use the =/tikz/current point is local=
option.

** calc
The package =calc= provide calculation for coordinates. The general
syntax is:
#+BEGIN_EXAMPLE
([options] $<coordinate computation$)
#+END_EXAMPLE

The coordinate computation is roughly
#+BEGIN_EXAMPLE
compute ::= A [+-] A [+-] A ...
A ::= <factor>*<coordinate><modifiers>
#+END_EXAMPLE

Note that the <coordinate> must be surounded by =()=.  Modifiers can
be:
- partway modifier: =!number!angle:<second coordinate>=,
  e.g. =(1,2)!.75!(3,4)=. angle: is optional
- distance modifiers: =!dimension!angle:<second coordinate>=. This
  differs with partway that it is a concrete distance (like 1cm)
  instead of a percentage.
- projection modifiers: =(a)!(b)!(c)= means draw a line between a-c,
  and project b onto c, get the intersection point.

* Path
Path is a list of path operations. The coordinates can be =cycle=, literally.
Before each operation, options can be given. The option will apply to
ALL following path operations.
- rounded corners
- sharp corners
- color=red

There's a style set point as =/tikz/every path=.

Here are a list of all operations:
- move-to: (a)
- line-to:
  - straight line: -- (a)
  - horizontal and vertical line: -|(a) |-(a)
- curve-to: ..controls<c>and<d>..(a): and<d> is optional.
- rectangle: rectangle(a)
- circle and ellipse
  - circle[<options>]: the options are mandary. Set a =radius=. If set
    =x radius= and =y radius= differently, it will be a ellipse.
- arc operation: arc[<options>]: TODO
- grid operation: grid[<options>](a): add a grid filling the
  rectangle. Options include step, xstep, ystep. The typically used
  style is =help lines=.
#+BEGIN_EXAMPLE
\draw [help lines] (0,0) grid (3,2)
#+END_EXAMPLE
- parabola TODO
- sin/cos TODO
- svg TODO
- plot
- to path operation: to[<options>]<nodes>(a): nodes are the label
  nodes, there's a =every to= style option to style it. Options
  include =in= and =out= to set the degree of the in and out lines.
- foreach operation: foreach<variables>[<options>] in {values} {<path
  commands>}. E.g. =foreach \x in {1,...,3} {--(\x,1) -- (\x,0)}= This
  is weired.
- let operation: seems to bind variable to coordinates.
- scoping operation: ={}=
- node and edge operation
- graph operation
- pic operation

* Special Syntax
** Path
- =\path (x1,y1) -- (x2,y2) -- (x3,y3)=

On the path, the last element can be =cycle=

Actions (on path).
- =\draw=: =\draw= is an abbreviation for =\path[draw]=
- =\fill=: only for closed path. abbrev for =\path[fill]=. =\filldraw=
  is abbrev for =\path[fill,draw]=.
- =\shade=: similarly there're =\shade= and =\shadedraw=
- =\clip=: does NOT have =\clipdraw= because it seems not making
  sense. If you want, use =\path[draw,clip]= explicitly

** Node
Nodes are intend for putting text. Everytime a node command is fired,
it is inserted at the /current point/. A node has a shape, drawing a
node means draw the shape.

Predefined shape:
- rectangle
- circle
- ellipse

A node can have a name for future reference. It is given by
~name=<name>~ option, or by =node(name){text}=.
** Tree
The node syntax can also be used to draw a tree. A node can be
followed by any number of children, each introduced by keyword
=child=. The children are also nodes, thus they can have children
using the same syntax. Trees have a set of options (TODO).

** Graph
The graph system is syntax suger for nodes, for the sake of creating a
lot of similar nodes. The =\graph= command is sure a DSL, /extending/
the DOT syntax.

#+BEGIN_SRC latex
\graph [grow down, branch right] {
  root -> {left, right -> {child, child}}
};
#+END_SRC




* Simple
#+BEGIN_SRC latex
  \draw[grid] (-2,0) grid (2,12);
  \draw[grid,blue] (-10,0) grid (-3,12);
#+END_SRC
* Style

Action
- draw=green
- fill=green!70!blue
- opacity=1
- scale=0.8

Shape
- rectangle
- rounded corners

String type:
- dashed
- dotted
- thick

* Coordinate
#+BEGIN_SRC latex
([shift={(2,-0.5)}] iflen.east)
#+END_SRC

* Node
- align=left :: have to have this to make the "\\" able to create
     newline
- text=color :: apply on text
- draw=color :: apply on border
- color :: apply for everything

=\path node=  is the same as =\node=.

To add the arrow tips, first add =[->]= option for the tikz environment.

#+BEGIN_SRC latex
\node (poi)[cfg,bench] at (0,0) {\texttt{strcpy(buf,s)}};
\draw (c9) -- (poi);
\draw[dotted] (c8) -- node[mystyle,auto]{The Text} (c9); % auto will place the label above the edge
\draw (c8) -- node[tf,auto,']{false} (poi); % swap(') will swap the auto label to the other half
\draw (callbar) .. controls ++(right:3) and +(left:3) .. (bar.west); % edge that curves
#+END_SRC


The text of a node can be anything, e.g. =lstlisting= environemnt.


** Label
- every label/.style
- label position={north east}

#+BEGIN_SRC latex
\node (A)[opt,label={right:label text}] at (0,0) {text};
#+END_SRC

* Matrix
#+BEGIN_SRC latex
\matrix {
  \node {}; & \node {}; \\
  \node {}; & \node {}; \\
};
#+END_SRC

* Packages
** shapes.multipart
#+BEGIN_SRC latex
\usetikzlibrary{shapes.multipart}
#+END_SRC

It adds to the node following options:
#+BEGIN_EXAMPLE
mynode/.style={split, rectangle split parts=2}
#+END_EXAMPLE

