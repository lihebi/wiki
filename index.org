#+TITLE: Hebi's Personal Wiki
* Introduction

This is the wiki.
It is not intended to export to a whole pdf file.
This index file will just do as its name states, giving the index.
There's no way to organize those chapters, so if needed, I will just export them individually.

# #+BEGIN_QUOTE
# 你必须非常努力，才能看起来毫不费力。
# #+END_QUOTE

#+BEGIN_HTML html
<blockquote id="quote">
<script>
var i = Math.round(Math.random()*100);
var quotes = [
"你一出场别人都显得不过如此。",
"你必须非常努力，才能看起来毫不费力。",
"我命由我不由天"
];
document.getElementById("quote").innerHTML = quotes[i % quotes.length];
</script>
</blockquote>
#+END_HTML

* Links
I found it is super important to notice who are the pioneers and what they are doing.
[[http://www.stroustrup.com/][Bjarne Stroustrup]] invented C++!
His close friend [[http://www.stepanovpapers.com/][Alexander A. Stepanov]], the author of STL.

Read about the [[https://github.com/isocpp/CppCoreGuidelines][CppCoreGuidelines]] project. It has nearly 10,000 stars on github.
Maybe it is closely related to [[http://cppcon.org/][CppCon]].

* sitemap
Use index here or use the [[file:sitemap.org][sitemap]].

** Programming
Fundanmental of computing theory can be found in this [[file:csapp.org][CSAPP study note]].
The [[file:./shell.org][shell]] is the fundamental knowledge to be linux master.
Utilities like [[file:awk.org][awk]] and [[file:sed.org][sed]] should be handy for text editing in scripts.
[[file:tmux.org][Tmux]] is the choice to work on remote.
[[file:regex.org][Regular Expression]] is considered the knowledge to make you productive.

Have difficulty choosing your first language?
Well, you should not. Why you would have choices other than [[file:c.org][C]]?
C has a [[file:c-lib.org][standard library]].
[[file:cpp.org][C++]] is generally more productive than C.
[[file:stl.org][Standard Template Library(STL)]] is the NO.1 important library in C++.
Traditional [[file:make.org][make]] system is prefered to build C projects.

[[file:hungarian.org][Hungarian notation]] is one of the famous way to choose variable names.

There're a couple of C libraries to ease our lives.
[[file:pugixml.org][Pugixml]] handles xml parsing.

Write simple tests using [[file:google-test.org][Google Test]]
can make your application much more robust and maintainable.

[[file:r.org][R]] is so powerful at statistics.

Low level [[file:assembly.org][assembly]] code.

As a computer scientist,
the knowledge about compiler is a must.
Check out the open source compiler framework [[file:llvm.org][LLVM]].

Write documents like a pro: [[file:latex.org][latex]].
The famous [[file:markdown.org][markdown]] notation system is far less powerful than [[file:org.org][Org Mode]].
It is like vim vs. [[file:./emacs.org][emacs]].
XML is ok with the query language [[file:xpath.org][XPath]].
Graph visualization can be done by [[file:dot.org][Graphviz/Dot]].

** Algorithm
Math is the basis of everything.
[[file:math-fund.org][Fundamental of math]] talks about the basic knowledges.

Some [[file:511/np.org][NP]] concepts are documented,
together with the analysis of a couple of well-known [[file:511/np-problems.org][NP problems]].
For those NP problems, [[file:511/approximation.org][Approximation]] may be the only way for quick solving.
[[file:511/lp.org][Linear Programming]] constitutes the basic optimization problems.

[[file:531/tm.org][Turing Machine]] form the basis of computer.
[[file:531/decidability.org][Decidability]] and [[file:531/NPC.org][NPC]] are the corresponding topics in computation theory as those in algorithms.

Some interesting [[file:oj.org][algorithm in practice]].

[[file:search-alg.org][Search algorithm]] is well-studied area.
Some unclassified [[file:name-alg.org][Name Algorithm]].

Some [[file:data-structure.org][data]] structure knowledge I picked up in undergraduate study.

** Web
Web technique like [[file:js.org][js]] is interesting.

* A Buffer
 * =MIPS=: million instructions per second.
 * =MIPS-year=: the number of instructions executed during one year of computing at 1M instructions/sec.
 * =Fan-out=: the maximum number of digital inputs that the output of a single logic gate can feed.
 * =K-ary tree=: rooted tree in which each node has no more than k children.
 * =Shared nothing architecture=: a distributed architecture in which each node is independent and self-sufficient. In particular, none of the nodes share memory of disk.
 * =Endianness=: Big-endian store MSB of a word in the *smallest* address. The memory grows up down, so small address is up.


* FAQ
** Why change to a new one instead of the [[http://wiki-old.lihebi.com][old wiki]]?
The old one is awesome in terms of that it uses pure Jekyll,
and it is configured in the sense that it recognizes the new markdown files and organize them by their directory structures.

1. The main downside is it is not systematic. It is so distributed that I can not easily find where to add new items.
2. Second, it lacks of some approach to generate a systematic pdf book for printing.
3. What's more, I added some web packages like Katex for formulas. It works fine, except I need to have an ugly =`$formula$`= markup for parsing, and the parsing code needs to be maintained too.
4. Fourth, markdown is not powerful enough.
5. Org mode has a strong cross reference system, and has powerful Babel evaluating. Most of all, org mode is so tightly integrated with Emacs.
6. Last but not least, I don't want to use another layer of software, jekyll. I just need to document something, in a reasonable easy to browse format.

So here we go, with org mode, exproting .org into everything, including papers and books.

There're some pages not migrated from old wiki:
=leetcode=, =leetcode/=, =633/=, =crypto/=, =compiler/=,
=design-pattern/=.
=java/=
=coffee/=
=ruby=
=python/=
=operating-system/=
=math/=
=scholar/=
=database/=
=docker/=
=platform/=
=software/=
=web/=
