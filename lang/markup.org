#+TITLE: MarkUp Language


* Org Mode


** Structure
*** Drawer
The heading can have a drawer, meaning it is hidden by default.
Under a headline, use =:DRAWERNAME:= and =:END:= to denote the beginning and end.
=C-c C-x d= also creates drawer easily. If region is active, move the region to a drawer.
*** Footnote
Footnote can be of these format:
- =[fn:1] some text=
- =[fn:name]=
- =[fn:: anonymous inline footnote!]=
- =[fn:name: named inline footnote that can be referenced from elsewhere]=
There should be two empty lines after the footnote definition.

=C-c C-x f= inserts a footnote (at the end of page);
=C-c C-c= jump to definition or back to reference;
=C-c '= :: edit the footnote in a seperate buffer.

*** Headings
- Moving around ::
  =C-c C-n= :: next heading
  =C-c C-p= :: previous heading
  =C-c C-f= :: next heading same level
  =C-c C-b= :: previous heading same level
  =C-c C-u= :: parent heading
  =C-c C-j= :: jump to some node. Direct type to navigate, and tab to expand.

- Editing ::
  Use the command =org-promote-subtree= and =org-demote-subtree= to adjust the heading level.
  =M-h= marks current tree.
  It is very useful to narrow the subtree using =C-x n s= and widen it back by =C-x n w=.

** Agenda
It is very convenient to use =org-capture= to quickly write down a
task to a pre-specified org file, and return from this
interruption. After that, use =org-refile= (=C-c C-w=) to organize the
entries *inside* the file, into different top-level headings. When a
job is done, use =org-archive-subtree= to move it to the archive file,
defaults to =xxx_archive= (=C-c C-x C-s=)in the same directory.

=org-capture-goto-target= will goto the file associated with template
entry. =org-capture-goto-last-stored= goes directly to the last stored
file.

- Creating :: A =TODO= keyword in the beginning of a heading mark it as a TODO item, or simply =M-S-<RET>= to create one.
- Attributes ::
  You can add a /schedule/ or /deadline/ for such an item,
  by =C-c C-s= and =C-c C-d= respectively.
  Time-stamp is normally inserted =C-c .= inserts or modifies time stamp. It can recognize a variety of format.
  Also, in the interactive calendar and in the org buffer, use =M-<ARROW>= to move.
  An item can have a priority within A to C, set by =C-c ,=.
- Operations ::
  There're a lot of operations on the entries.
  In the org buffer, =C-c t= will rotate TODO state.
  For a list that is not a heading, you can pre-pend the list with =[ ]=, and =C-c C-c= toggles it.
  A task can be clocked.
  Clock in via =C-c C-x C-i= and clock out via =C-c C-x C-o=.
  =C-c ^= can sort the lists, based on many attributes such as todo status, time, priority.
- Agenda View ::
  It is better to view the TODO lists in a dedicated buffer.
  Org keeps the variable =org-agenda-files= for the global agenda files.
  You can add current file by =C-c [=.
  The global agenda has different view method,
  namely =C-c a a= for the week view, =C-c a t= for all todo items, and =C-c a L= for the timeline of current file.
  In side the buffer, =<ENTER>= enter the org file while =<TAB>= display the org file in another window.

  In the agenda view, =d,w,vm,vy=  change the range to day, week, month, year respectively.
  =E= to show the entry text (text inside the heading), =R= show the clock report.
  =s= saves all buffers,  =f=, =b= and =.= go to next, previous week and today respectively.
  
  As always =g= to refresh.
  It is easier to operate in such a buffer: you don't usually need the =C-c= prefix.
  =t= changes TODO status, =,= set the priority, with =+= and =-= to raise or lower it.
  You can still set deadline and schedule using the same binding.
  Clocking in and out becomes =I= and =O=, and cancel with =X=.

** Tags
Tags can be the variable name plus =@= is available.
Every heading can have tags at the end of it. Use =:tag1:tag2:= syntax.
Tags will be inherited by default for the subtrees.
=C-c C-c= :: at the heading, set the tags.

# ** predefined tags
# Put a /unique/ letter for the /fast tag selection/ by just a single keystroke.

# #+BEGIN_SRC elisp
# (setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l)))
# #+END_SRC

# You can also specify in a file basis:
# #+BEGIN_EXAMPLE
# #+TAGS: @work(w) @home(h)
# #+END_EXAMPLE

# Then =C-c C-c= on this line to "activate" it.

# ** search
# - =C-c / m= :: construct sparse tree based on tag
** Properties
Similar to tags, we can also set the property, the key value pairs.
It is inside the =PROPERTY= drawer. Each line is a property, where key is surrounded with =:=, and value after it.
Property is not inherited by default.

# ** Edit
# Editing properties is done in column view.
# First, you need to define the column format. Add and execute the following line:
# #+BEGIN_EXAMPLE
# #+COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
# #+END_EXAMPLE

# - =C-c C-x C-c= :: toggle the column view
# - =g= :: refresh
# - =q= :: quit
# - =n= :: next allowed value
# - =p= :: previous allowed value
# - =e= :: edit this field
# - =v= :: show the value of the field

# ** search
# Search uses the same =C-c / m=.


** Exporting
*** bibliography
Normally you only need:
#+BEGIN_EXAMPLE
bibliographystyle:plain
bibliography:/home/hebi/github/bibliography/hebi/tools.bib
#+END_EXAMPLE

It remains to be seen how to put a set of default bib file instead of specifying this ugly file.

*** Latex Exporting
**** doc class & options

 #+begin_example
 #+LATEX_CLASS: fse
 #+OPTIONS: toc:nil author:nil

 #+BIBLIOGRAPHY: slicing plain
 #+INCLUDE: "appendix.org" :minlevel 1
 #+end_example

**** appendix
 #+begin_example
 #+LaTeX: \appendix

 #+INCLUDE: "appendix-todo.org" :minlevel 1
 #+INCLUDE: "appendix-context.org" :minlevel 1
 #+INCLUDE: "appendix-helium-guard.org" :minlevel 1
 #+INCLUDE: "appendix-valgrind-exp.org" :minlevel 1
 #+end_example

**** code listing
#+BEGIN_EXAMPLE
#+ATTR_LATEX: :options frame=shadowbox
#+END_EXAMPLE


*** Beamer
The header setup:
#+BEGIN_EXAMPLE
#+STARTUP: beamer
#+AUTHOR: Hebi Li
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+BEAMER_THEME: Madrid
#+OPTIONS: H:2 toc:t num:t
#+END_EXAMPLE

The above configuration define "H" to be 2, meaning the frame is the second level heading (=**=).
The top level heading (=*=) can be used to organize the presentation.
To show the current section, add this just /after/ every top level heading.

#+BEGIN_EXAMPLE
#+TOC: headlines [currentsection]
#+END_EXAMPLE

There's an automatic way to add table of contents before each section:
#+BEGIN_EXAMPLE
#+latex_header: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Topic}\tableofcontents[currentsection]\end{frame}}
#+END_EXAMPLE

The =***= will becomes block.
These blocks can utilize the horizontal space.

#+BEGIN_EXAMPLE
**** Octave code                                              :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:
**** The output                                               :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :BEAMER_env: block
    :BEAMER_envargs: <2->
    :END:
#+END_EXAMPLE


** Table
#+begin_example org
#+TBLFM: $4=$2/10
#+TBLFM: $4=$2*100/$3
#+TBLFM: $4=(round $4)
#+end_example
** Image
=[[./image]]=

- org-toggle-inline-image
- org-display-inline-image
- org-redisplay-inline-image
- org-remove-inline-image

The width is defined by =org-image-actual-width=
- t: actual width
- 300: 300px

Use =#+ATTR_HTML: :width 300px= to set the html export size.

** org-ref
**** Commands
- =C-c ]=: insert citation, typically with helm: =org-ref-helm-insert-cite-link=

***** Navigation in the bib file
- =M-n= :: next entry
- =M-p= :: previous entry


* Markdown
title
#+begin_example
# xxx ## xxx
#+end_example

cite
#+begin_example
> xxx
#+end_example

#+begin_example
*italic* **bold**
_italic_ __bld__
#+end_example

Image & link

#+begin_example
[link name](http://www.lihebi.com)
![image name](http://xx.jpg)
[link name][url]
[url]: http://xxx.xxx
#+end_example





* UML

** Plantuml

*** Installation
Set the path in =org-plantuml-jar-path= variable in emacs.
=C-c C-c= to evaluate it, and =C-c C-x C-v= (=org-toggle-inline-image=) to show the image inline.

The block line:
#+BEGIN_EXAMPLE
#+BEGIN_SRC plantuml :file wikitmp_plantuml.png :exports results
#+END_EXAMPLE

*** Class Diagram
#+BEGIN_SRC plantuml :file wikitmp_class_diagram.png :exports both
abstract class AbstractClass {
  field
  Method()
  .. Seperators ..
  #ProtectedField
  ==
  -PrivateMethod()
  __
  +PublicMethod()
  ~PackagePrivateField
  --
  {static} StaticField
  {abstract} AbstractMethod()
}
class Concrete
class Single << (S,#FF7700) Singleton >>

Single "A side note" <|-- "B side note" Concrete : extension
AbstractClass --* Concrete : Composition,\nmultiline
AbstractClass --o Single : Aggregation
AbstractClass -- Single : just a line
AbstractClass ..|> Single : dotted, with arrow >
note left of AbstractClass : note left of A, can be\n<b>top,bottom,left,right</b>


#+END_SRC

*** Sequence Diagram
Sequence Diagram is used to describe the communication of /participants/.
The message can be sent to myself.

#+BEGIN_SRC plantuml :file wikitmp_sequence.png :exports both
title: Some Title
'this is a comment
participant Alice
actor Bob
database DB

Alice -> Bob : label on arrow
Alice <-- Bob : dotted arrow
note right: a note

== seperator ==
Alice -[#red]> DB : red arrow
...5 minutes later...
Alice -[#0000ff]-> Cindy : the color #0000ff
...
Bob -> Cindy
Bob -> Bob : self-messaging

note left
        multiple
        line
        note
end note

note left of Alice #cyan
        multi-line
        note
        left of Alice,
        in background cyan
end note

note left of Bob: Bob is an "actor"
note left of DB: DB is a "database"
note left of Cindy: Cindy is anonymous

note over Alice: note over Alice
#+END_SRC


* Graphviz/Dot

** Language
A graphviz source start from either =graph= or =digraph=. In graph,
you need to use =--= for edges, while in =digraph=, use =->= instead.
An optional =strict= means there's no duplicated edges (previous will be
removed).

Statements are separated by semicolon. Typically there are node stmt,
edge stmt, and subgraph to group statements.

#+begin_example
graph :: [strict] (graph | digraph) [ID] '{' stmt_list '}'
subgraph :: [subgraph [ID] ] '{' stmt_list '}'
#+end_example

#+begin_example
stmt_list :: stmt ';' stmt_list
stmt :: node_stmt | edge_stmt | attr_stmt | ID '=' ID | subgraph
#+end_example

Attributes can be associated with node, edge, graph, subgraph, or
cluster of subgraph. It is a list of key=value pairs. The =attr_stmt=
is meant for setting style for the whole subgraph.
#+begin_example
attr_stmt :: (graph | node | edge) attr_list
attr_list :: '[' (ID = ID) + ']'
#+end_example

If you only want to apply attr to node, you should write the node_stmt
separately, otherwise it will be applied on the edges.
#+begin_example
edge_stmt :: (node_id | subgraph) (->|--) (node_id | subgraph) + [attr_list]
node_stmt :: node_id [attr_list]
#+end_example

A subgraph is a cluster, if its name has prefix =cluster=.


** Attributes
- attribute: https://graphviz.gitlab.io/_pages/doc/info/attrs.html
- Color names: https://graphviz.gitlab.io/_pages/doc/info/colors.html

| name          | used by (NEC by default) | value |
|---------------+--------------------------+-------|
| color         |                          |       |
| fillcolor     |                          |       |
| fontcolor     |                          |       |
| fontsize      |                          |       |
| label         |                          |       |
| labeldistance | E                        |       |
| labelfontsize | E                        |       |
| style         |                          |       |
| shape         | N                        |       |

common style:
- solid
- dashed
- dotted
- bold

node style:
- rounded
- diagonals
- filled
- striped
- wedged

Edge style: just common style.

Cluster style
- rounded
- filled
- striped

Node shape (some):
- box
- ellipse
- oval
- circle
- diamond
- plaintext


** CMD
#+begin_example sh
dot -Tpng -o xxx.png xxx.dot
# automatic generate output filename based on input name
dot -Tpng -O xxx.dot
#+end_example

Popular output format:
- png
- pdf
- svg
