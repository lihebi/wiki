#+TITLE: Shell

* Concepts
** Command Interaction
   The first type of interaction is pipeline.
   =<cmd1> | <cmd2>=, Each command execute in its own sub-shell.
   The exit status of a pipeline is the exist status of the last command.
   =<cmd1> |& <cmd2>= is short hand for =<cmd1> 2>&1 | <cmd2>=.

   Commands separated by =;= are executed sequentially.
   The shell waits for each to terminate in turn.
   The return status of last one is returned.

   =&&= and =||= have a higher precedence than =;=.
   The later command is executed based on the return result of previous one.
   The return status is the last executed command.

   Grouping of command is different.
   The grouping can be done by =()= and ={}=.
   =()= will create a sub-shell and execute the body commands,
   while ={}= will not create sub-shell. The last command in the body MUST terminate with =;=.

** redirection
   - =ls > dirlist 2>&1=
   - =&>word= is the same as =>word 2>&1=
   - =&>>word= is the same as =>>word 2>&1=

   /Here document/ is of the form:
   #+BEGIN_EXAMPLE
     cmd << AUniqueString
     any thing
     interesting
     AUniqueString
   #+END_EXAMPLE

   The start and end unique string must be same and must not appear in the body.
   The block will be used as the input to the command.
   Similarly, the /here string/ is used by:
   #+BEGIN_EXAMPLE
     cmd <<< $word
   #+END_EXAMPLE

   And the expansion of word will be used as the input.

* expansion
  There are seven kinds of expansions, in order of expansion order.
  After these expansion are performed, the =quote removal= are performed.
  - brace :: =/usr/local/{old,new,dist}= will expands to three strings.
  - tilde :: home
  - parameter and variable :: in separate section
  - arithmetic ::
  - command substitution :: using =$()= or =`cmd`=. The value is the output of the command, with any trailing newlines deleted.
  - word splitting ::
       The shell treats each character of '$IFS' as a delimiter.
       If 'IFS' is unset, or its value is exactly =<space><tab><newline>=.
  - filename :: The file must exists to be expanded.
       =*= matches any string, including null string.
       =?= matches a single character.
       =[..]= matches any one of those.

** parameter and variable expansion
   * ~${var:-word}~: if var is unset or null, the value is expansion of word
   * ~${var:=word}~: if var is unset or null, the expansion of word is assigned to var

   Meta data:
   * ~${#var}~: return length in character of the expansion of var

   Sub-string:
   * ~${str:offset}~: substr from offset to end
   * ~${str:offset:length}~: substr from offset for count characters

   String trimming
   pattern is first expanded, then remove the shortest or longest match from the beginning or tailing of str.
   Return the value, leave str unchanged.
   * ~${str#word}~ :: /shortest/, beginning
   * ~${str##word}~ :: longest, beginning
   * ~${str%word}~ :: shortest, tailing
   * ~${str%%word}~ :: longest, tailing

   Replacing
   * ~${str/pattern/string}~: the first longest match is replaced with string
     if pattern begins with:
     - ~/~: all matched is replaced
     - ~#~: match must happen in the begin
     - ~%~: match must happen in the tail

   Case changing
   match of pattern will change case
   * ~${str^pattern}~: one match, lowercase to uppercase
   * ~${str^^pattern}~: all match, lower to upper
   * ~${str,pattern}~: one match, upper to lower
   * ~${str,,pattern}~: all match, upper to lower
*** special parameters
    * ~$*~: "$1c$2c$3c...", c is the first character of $IFS (defaults to space)
    * ~$@~: "$1" "$2" "$3" ...
    * ~$#~: the number of positional parameters, for =a.out -h= it is 1
    * ~$?~: exit status
    * ~$n~ :: the nth parameter

    * ~$-~: current option flags
    * ~$$~: process ID of the shell
    * ~$!~: process ID of the job most recently placed into the background

* IO
  The loop can accept the redirection, thus can be used to read a file:
  #+BEGIN_SRC shell
  while read -r line; do
      # some job
  done < papers.txt
  #+END_SRC

  The ordinary reading from command line:
  #+BEGIN_SRC shell
read -p "please input: " a b c
  #+END_SRC

  When using =echo=, use =-e= option can print out control characters such as =\n=.

* Control Flow
** Condition commands
   =[=  and =]= are used to evaluate a conditional expression.
   Expressions can be combined by: =!=, =()=, =-a=, =-o=.

   =((...))= will cause the expression to be evaluated by shell arithmetic.
   /If the value of the expression is non-0, the return status is 0, which is wired./

   =[[]]= will return 0 or 1, depending on the evaluation of the /conditional expression inside/.
   The /bash conditional expressions/ are the table done below.

   The expression will performs some transformation.
   Not-performed:
   - /Word splitting/
   - /filename expansion/

   Performed:
   - /tilde expansion/
   - parameter and variable expansion
   - arithmetic expansion
   - command substitution
   - process substitution
   - quote removal

   When using ~==~ to compare string, the right hand side string is considered as a pattern,
   and the operation performed is pattern matching, as described in filename expansion.

   The expression can be used with some operators:
   - =(exp)= :: only add the precedence
   - =!exp= :: negate
   - =exp && exp= :: and
   - =exp || exp= :: or

*** bash conditional expression (*only work with double brackets*)

    | expr                | meaning                         |
    |---------------------+---------------------------------|
    | /                   | <                               |
    | ~-f file~             | file exists and is regular file |
    | ~-d file~             | file exists and is directory    |
    | ~-a file~             | file exists                     |
    | ~-s file~             | file exists and size > 0        |
    | ~-L <file>~           | symbolic link                   |
    |---------------------+---------------------------------|
    | ~-r <file>~           | readable                        |
    | ~-w <file>~           | writable                        |
    | ~-x <file>~           | executable                      |
    | ~<file1> -nt <file2>~ | newer than?                     |
    | ~<file1> -ot <file2>~ | older than?                     |
    |---------------------+---------------------------------|
    | ~-z string~           | string is empty                 |
    | ~-n string~           | string is not empty             |
    | ~string1 == string2~  | equal                           |
    | ~string1 != string2~  |                                 | 

** Conditional
   The =if= clause signature is =if ; then ; elif ; then ; else ; fi=.
   The test command is not a condition, but a command.
   The return code of the command is used as the condition.
   If the command returns 0, the body is executed.
   Non-zero will perform the =else= clause.

   =case= signature is: =case word in p1) cmd;; p2) cmd;; esac=
   The word undergoes
   - tilde expansion
   - parameter expansion
   - command substitution
   - arithmetic expansion
     - quote removal

   Use =*= as the default pattern.
   Patterns can be combined with =|=.

   Each case must be terminated by =;;=, =;&= or =;;&=.
   - =;;= :: no other matches are attempted
   - =;&= :: continue with the next clause, without even evaluate the match
   - =;;&= :: test next pattern

** loop
   As for other languages, =break= and =continue= can be used.
   - =until cond; do cmd; done= ::
   - =while cond; do cmd; done= ::
   - =for name in words; do cmd; done= :: the words can be ={1..10}=, =$(seq 1 10)=
   - =for ((i=0;i<10;i++)); do cmd; done= ::

* function
  The function has two methods to declare, use the name and a pair of parenthesis, and the function keyword with optional parenthesis.
  I found using function keyword and NO parenthesis is the best because:
  - the function keyword tells me it is function, very explicitly
  - the parenthesis is not going to accept parameter, thus it causes confusion.
  So in a word, use: =function foo {}=

  A function declaration can be removed by =unset -f=.
  The argument of the function uses the same way for the argument to the script, the propositional special variables.
  And the call to the function is used as if it is a command.

  Want the return value? The =return= statement will only set the /return code/ of the command.
  Echo the result and assign the result to a variable may be a choice, but I found it not good because the body might echo something as well.

* Tips
  - =source= will be in effect in current shell session, but not the sub-shells
  - =export= declare global variable, and will be in effect in sub-shells
** Check whether a command exists
   Do not use =which=, it is expensive, and the return value is not well defined.
   Use =hash= for commands and =type= when considering built-in and keywords. [fn:hashtype]

   #+BEGIN_SRC shell
  type foo >/dev/null 2>&1 || 
      { echo >&2 "I require foo but it's not installed.  Aborting."; exit 1; }
  hash foo 2>/dev/null ||
      { echo >&2 "I require foo but it's not installed.  Aborting."; exit 1; }
   #+END_SRC

[fn:hashtype] http://stackoverflow.com/questions/592620/check-if-a-program-exists-from-a-bash-script


* Awk
** tmp

#+BEGIN_EXAMPLE
match($0, /#include <(.*)>/, a) {print a[1]}
#+END_EXAMPLE
- sum line of numbers
#+BEGIN_EXAMPLE
awk '{s+=$1} END {print s}' mydatafile
#+END_EXAMPLE



The quote for command must be single quote! not double.
That is because the double quote will do shell substitution.

#+BEGIN_EXAMPLE
awk '{print $0}'
#+END_EXAMPLE

** Introduction
Use shebang =#! /bin/awk -f= for script file. In terminal, Invoke by
=awk 'PROGRAM' INPUT-FILE1 INPUT-FILE2 ...=. MUST USE single
quote. Run a script by =awk -f script.awk INPUT-FILES=.

The "program" contains a list of statements. Each of form =pattern
{action}=.  A missing { action } means print the line; a missing
pattern always matches.  Pattern-action statements are separated by
newlines or semicolons.

The program starts by evaluating the /all/ BEGIN patterns in
order. Each file is processed in turn by reading data until a record
separator. This typically means one line at a time, for all the
files. All patterns are examined against the line. If match, action is
executed.

Invoking options:
- =-F FS= :: set FS
- =-v VAR=VAL= :: set variable before the program begins


AWK first read record using RS as separator from input. For each
record, awk use FS to split it into fields.


awk is line-based, and the content of lines are splited into fields
=$1=, =$2=, ... by the separator =FS=.  =$0= refers to the entire
line. Function parameters are local, all other variables are global.


** patterns

Patterns are arbitrary Boolean combinations (with =!= =||= =&&=) of
regular expressions and relational expressions.

A pattern may consist of two patterns separated by a comma, it is
called pattern range. In this case, the action is performed for all
lines from an occurrence of the first pattern though an occurrence of
the second, inclusive.

special patterns: =BEGIN=, =END=.  Cannot combine with other patterns.

Also, we can match part of the input by using regular expression
comparison operators (=~= and =!~=). =EXP ~ /REGEXP/= returns true if
match. This can be used in patterns, as well as as conditions for if,
while, for, do statements.

Case sensitivity is controled by =IGNORECASE= variable. You can set
when invoking awk, or set the variable in the awk program. Another way
to ignore case is to call =tolower= or =toupper= function before
comparison.

** Actions

An action is a sequence of statements.  Statements are terminated by
semicolons, newlines or right braces.

Reference of user-defined variable do not use $. E.g. ~myvar=$2~ will
assign $2 to myvar! Refer the var directly: no need to use a $ as
shell variables.

Expressions are very similar to C. The added contents are:
- $N: field reference
- expr expr: string concatenation
- string [!]~ pattern: ERE match
- expr in array
- (index) in array

*** Variables
- Except function parameters, all variables are
  /global/. Uninitialized value have both a numeric value of 0 and a
  string value of empty string.
- field variable can be referenced by $N or $expr where expr is
  numerical expression. They are assignable. Reference to non-exist
  fields is uninitialized value. NF is the number of fields. Assign to
  non-exist field increase NF.

Important Variables
- =NF= :: number of fields in the current record
- =NR= :: line number of current record
- =FNR= :: line number of current record in the current file
- =FILENAME= :: the name of the current input file
- =FS (Field Separator)= :: regular expression used to separate fields; also settable by option -Ffs.
- =RS= :: input record separator (default newline)
- =OFS= :: output field separator (default blank)
- =ORS= :: output record separator (default newline)

*** Output
print and printf write to standard output by default. Redirect is supported.
- > expr : file
- >> expr : file
- | expr : command




*** Control Structure
- =if (condition) then-body [else else-body]=
- =while (condition) body=
- =do body while (condition)=
- =for (init;cond;inc) body=
- switch(expr) {case val: body default: body}
- break
- continue
- next: stop current record immediately and go on to next

*** String Functions
- =sub(ere, repl[, in])= :: substitute the first match of ere inside
     in (or $0) by repl. Return number of substitution. =&= can be
     used in repl.
- =gsub(ere, repl[, in])= :: sub for all matches
- index(s,t) :: index t inside s, 0 if not occur.
- length([s]) :: return length for s (or $0)
- match(s, ere) :: return position of match of ere in s
- split(s, a[, fs]) :: split s into array a
- sprintf(fmt, expr, expr, ...) :: printf with format string
- substr(s, m[, n]) :: return substring from m with length at most n
- tolower(s) :: return lowercase
- toupper(s) :: uppercase

** User-defined Functions
#+BEGIN_EXAMPLE
function name([param, ...]) {statements}
#+END_EXAMPLE

** Examples
#+begin_src shell
awk 'NR==10 {print}' input.txt # output 10th line, or empty is less than 10 lines
#+end_src


* Sed

** Invoke
- In shell script, use shebang =#!/bin/sed -f= or =#!/bin/sed -nf=.
- In command line, =sed [OPTION] [INPUT]=
 - INPUT :: if not exists, or is ~-~, use =stdin=. If multiple,
            concatenate them first, then apply to the whole
 * -n :: by default each line of input is echoed to the standard output
   after all of the commands have been applied to it. The -n option
   suppresses this behavior
 * -e :: expressions in string. can have multiple: sed -e 'xxx' -e 'xxx' -e 'xxx' file.txt
 * -f :: script file
 - -E :: extended expression
 - -i :: modify in place

** How Sed Works
=sed= maintains two data buffers: /pattern space/ and /hold space/,
both of them initially empty.  It copies a line from input, remove
trailing newline, and put into pattern space. Commands matched by
address are processed. After the last command, the pattern space is
printed out (unless -n is used), and pattern space is deleted (unless
special commands like 'D' are used). Next cycle begins and process the
next line.

The hold space, on the other hand, holds data between cycles.
- h :: hold. replace hold space with pattern space
- H :: Hold. append line from pattern space to hold space, with a newline before it
- g :: Replace the contents of the pattern space with the contents of
       the hold space.
- G :: Append line from hold space to pattern space, with a newline before it
- x :: Exchange the contents of the hold and pattern spaces.



** Commands
The commands is of form =[addr]X[options]=
- options :: specific for different commands
- X :: single-letter comand
- [addr] :: X will only be applied to the matched lines by addr

Commands can be separated by semi-colon or newline.
- Most commonly used command:
  - d: delete
  - D: Delete. delete line from pattern space until the first newline, and restart the cycle
  - p: print pattern buffer
  - P: print line from pattern space until first newline
  - =: print line number
  - n: (next) print pattern space, then replace with next line
  - N: append line from input file to pattern space
  - s/REGEXP/REPLACEMENT/FLAGS: if REGEXP is matched, the matched
       part is replaced by REPLACEMENT
    - REPLACEMENT:
      - \1-\9: refers to the capture group
      - &: refers to whole match
    - flag:
      - g: replace all matches
      - [N]: only replace N-th match
      - p: if substitution was made, print the new pattern space
      - w FILE: if substitution was made, write the result to FILE
      - I: case insensitive

- Not so common:
  - =a TEXT=: append TEXT after a line. It actually even after the
              newline, starting a new line.
  - =i TEXT=: insert TEXT before a line, starting a new line.
  - =b LABEL=: branch unconditionally to LABEL
  - =c TEXT=: change line to TEXT
  - =l=: Print the pattern space in an unambiguous form. Print newline as '\n'.
  - =#=: begin a line comment
  - =q [EXIT-CODE]=: quit with code
  - ={ COMMANDS }=: commands should be separated by =;=, this allows
                    share address.
  - =r=: read a file
  - =w=: write
  - =b=: branch
  - =t=: test
  - =:label=: label

** Address
  - LINE: single line number
    - NUMBER: line start from 1
    - =$=: last line
    - FIRST~STEP: matches every STEP-th line starting with line FIRST
  - regular expression:
    - =/REGEXP/=:
    - =/REGEXP/I=: case insensitive
  - range:
    - =LINE,LINE=:
    - =LINE,REGEXP=: starting from LINE; REGEXP will check the
                     /following/ line, i.e. range span at least two
                     lines. LINE can be 0, in which case REGEXP is
                     trying to matching start from beginning.
    - =ADDR,+N=: ADDR adn N lines following it.
    - =ADDR,-N= and the lines following until next line whose line number
      is multiple of N (this line is considered matched)
    - append =!= to range will inverse it.

*** Regular expression
**** Basic and Extended RE
| Basic       | Extended  |
|-------------+-----------|
| \+          | +         |
| \?          | ?         |
| \{I,J\}     | {I,J}     |
| \(capture\) | (capture) |
| \<alter>    | <alter>   |

alter is actually the vertical line.

**** Common
Bracket Expressions (can be used in both basic and extended RE)
Put inside ~[[]]~ the following
- :space:
- :digit:
- :alnum:
- :alpha:
- :lower:
- :upper:

Extension
- \w
- \W
- \b
- \B
- \s
- \S
- \<
- \>


** examples

print

#+begin_src shell
# add line numbers first,
# then use grep,
# then just print the number
cat -n file | grep 'PATTERN' | awk '{print $1}'
# the equilvalence
sed -n '/PATTERN/ =' file
#+end_src

substitute

#+begin_src shell
s/pattern/&/ # '&' stands for the total match
# in extend mode(-E), can use \1 \2
s/(a)b/\1/
s//string/ # use the last run-time used pattern
s/xxx/xxx/g # substitute globally: all
# there will not be recursion. sed will not examine the generated string
s/loop/loop loop/g # will NOT run forever
s/xxx/xxx/2 # only substitute the second match
s/xxx/xxx/g2 # substitute 2,3,4,...
s/xxx/xxx/p # will print out even if -n is used
s/xxx/xxx/I p # ignore case; command can be used together
s/a/A/2pw /tmp/file # combine more
#+end_src

delete

#+begin_src shell
# -i: make change to the original file
# /d: delete the line if match
sed -i '/@slice/d' $ClassName.java
sed -i 'g/@slice/d' xx.java # remove all
sed '/^$/d' # remove all empty lines
sed '11,$ d' # only output first 10 lines
sed '1,/^$/ d' # delete everything up to the first blank line.
#+end_src

** Trouble Shooting
*** GNU sed on Mac
The sed version on Mac OS and GNU Linux are different.
So, use gnu! On Mac, install
#+BEGIN_EXAMPLE
brew install gnu-sed
#+END_EXAMPLE

This will make a =gsed= command available.
To write a cross platform script, use
#+BEGIN_SRC shell
echo "OSTYPE: " $OSTYPE
SED=sed
if [[ "$OSTYPE" == "linux-gnu" ]]; then
    SED=sed
elif [[ "$OSTYPE" == "darwin"* ]]; then
    SED=gsed
fi
$SED -E -e "460,$ s/REG[0-9]{1,2}//g" compress42.c.orig > compress42.bugsig.c
#+END_SRC

*** About the regular expression version
=-E= will enable extra features, such as:
- a{1,2}

See =re_format(7)= for details.

There's no =\d=, so use =[0-9]= instead. The man page says =[:digit:]= can be used, but it seems not working.

