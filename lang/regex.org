#+TITLE: Regular Expression


* General
| symbol     | meaning                               |
|------------+---------------------------------------|
| /          | <                                     |
| =.=        | everything                            |
| =\b=       | start or end of a word                |
| =\B=       | not =\b=                              |
| =\d=       | digit                                 |
| =\D=       | not =\d=                              |
| =\s=       | whitespace                            |
| =\S=       | not =\s=                              |
| =\w=       | alphabet,digit, =_=                   |
| =\W=       | not =\w=                              |
|------------+---------------------------------------|
| ={8}=      | repeat 8 times                        |
| ={5,8}=    | repeat 5 - 8 times                    |
| ={5,}=     | repeat 5+ times                       |
| =*=        | 0+                                    |
| =+=        | 1+                                    |
| =?=        | {0,1}                                 |
| =^=        | start of whole string                 |
| =$=        | end of whole string                   |
| =[]=       | any one of them                       |
| =[^]=      | any one other than them               |
|------------+---------------------------------------|
| ~(?=ABC)~  | Positive look ahead                   |
| ~(?!ABC)~  | Negative look ahead                   |
| ~(?<=ABC)~ | Positive look behind                  |
| ~(?<!ABC)~ | Negative look behind                  |
|------------+---------------------------------------|
| =()=       | capturing group, \1, \2 to back-refer |
| =(?:)=     | non-capturing group                   |

ahead means the string /AFTER/ it, and behind means the string /BEFORE/ it.



* Language Specific


** C++
*** Usage
#+BEGIN_SRC C++
#include <iostream>
#include <string>
#include <regex>
#+END_SRC
*** construction
#+BEGIN_SRC C++
  std::regex color_regex("([a-f0-9]{2})");
#+END_SRC

*** Search
#+BEGIN_SRC C++
  std::string line = "xxx";
  std::regex_search(line, color_regex);
  std::smatch color_match;
  std::regex_search(line, color_match, color_regex);
  for (int i=0;i<color_match.size();i++) {
    // the first is entire match
    // the followings are () matches
    color_match[i]; // string
  }
#+END_SRC
*** Match

#+begin_src C
std::regex_match(fname, base_match, base_regex);
// The first sub_match is the whole string; the next
// sub_match is the first parenthesized expression.
if (std::regex_match(fname, pieces_match, pieces_regex)) {
  std::cout << fname << '\n';
  for (size_t i = 0; i < pieces_match.size(); ++i) {
    std::ssub_match sub_match = pieces_match[i];
    std::string piece = sub_match.str();
    // can also piece = sub_match, implicit convertion
  }   
}  
#+end_src

*** replace
#+begin_src C
std::regex_replace(s, reg, "");
#+end_src

** Java
#+begin_src java
Pattern p = Pattern.compile("a*b");
Matcher m = p.matcher("aaaaab");
boolean b = m.matches();
m.group(3); // => String
#+end_src

** Python
*** construction
#+BEGIN_SRC python
import re
pattern = re.compile('\d+.*$')
#+END_SRC

*** match
#+BEGIN_SRC python
s = 'this is a test string'
pattern.match(s) # return True or False

#+END_SRC

*** search
#+BEGIN_SRC python
pattern.findall(s)
#+END_SRC

*** shorthand
#+BEGIN_SRC python
m = re.match("[pattern]", "string")
m.group() # 匹配的字符串
m = re.search("[pattern]", "string")
m.group()
re.search("pattern", "string", re.IGNORECASE)
m = re.findall("[pattern]", "string")
#+END_SRC

* POSIX standard

** Definition
The search for a matching starts at the beginning of string, and stops
when the /first/ sequence matching is found. If the pattern can match
several string at a start point, the /longest/ such sequence is
matched. In other word, /the longest of the leftmost matches/. 

Similarly Each subpattern (capturing group?), from left to right,
shall also match the longest possible string. E.g. when matching
=\(.*\).*=, the =(\1)= is the whole string.

The end of the string should be a NUL. Some utilities use <newline>.

** Basic Regular Expressions (BRE)
Special characters
- <period>, <left-square-bracket>, <baclslash>
  - when NOT in Bracket Expression
  - Match any character other than NUL
- <asterisk>
  - when NOT in Bracket Expression
  - when NOT the first of entire BRE (after initial =^= if any)
  - when NOT the first of subexpression (after initial =^= if any)
- circumflex>
  - when used as the first of the entire BRE
  - when used as the first in Bracket Expression
- <dollar-sign>
  - when used as the last of entire BRE
*** Bracket Expression
[^]...[:alnum:]..1-8.-]
- the close bracket can be ordinary if it is the first (after intial
  =^= is any)
- hyphen(-) can be ordinary if it is first of last. Put it last if you
  want to use it with close bracket above
- hyphen is inclusive
- =^= immediately after left bracket turns it into a non-matching
  list, a.k.a. matches any character except these.
- [:slnum:] is only valid inside bracket expression. It is called
  /character class expression/. All such expressions:
  - alnum, cntrl, lower, upper, space, alpha, digit
  - print, blank, graph, punct, xdigit

*** Matching Multiple Characters
- =*=
- =\(\)= is used. It can be arbitrarily nested. 
- =\N= is back reference. It shall match the same string as /was/
  matched by N-th sub-expression, it can be empty.
- =\{m\}=, =\{m,\}=, =\{m,n\}=: inclusive

*** Precedence
From high to low:
- =[::]=
- escape =\=
- bracket expression
- subexpression/back reference
- multiple character (=*= and =\{m,n\}=) (=+?= for ERE)
- concatenation
- anchor
- (=|= for ERE)


** Extended Regular Expressions (ERE)
- =()= are special
- =+?{= are special
- =|= is special

Note that no word begin in the standard.

