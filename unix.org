#+TITLE: Unix Programming
References
- https://www.gnu.org/software/libc/manual/html_node/index.html

* Low-level IO
** open
#+BEGIN_SRC C
int open(const char *filename, int flags[, mode_t mode])
#+END_SRC

Create and return a file descriptor.
** close
#+BEGIN_SRC C
int close(int filedes)
#+END_SRC
- file descriptor is deallocated
- if all file descriptors associated with a pipe are closed, any
  unread data is discarded.
Return
- 0 on success, -1 on failure

** read
#+BEGIN_SRC C
ssize_t read(int filedes, void *buffer, size_t size)
#+END_SRC
- read /up to/ size bytes, store result in buffer.
Return
- number of bytes actually read.
- return 0 means EOF

** write
#+BEGIN_SRC C
ssize_t write(int filedes, const void *buffer, size_t size)
#+END_SRC

- write up to size bytes from buffer to the file descriptor.
Return
- number of bytes actually written
- -1 on failure

** fdopen
#+BEGIN_SRC C
FILE *fdopen(int filedes, const char *opentype)
#+END_SRC

from file descriptor, get the stream

** fileno
#+BEGIN_SRC C
int fileno(FILE *stream)
#+END_SRC

from stream to file descriptor

** fd_set
This is a bit array.
- FD_ZERO(&fdset): initialise fdset to empty
- FD_CLR(fd, &fdset): remove fd from the set
- FD_SET(fd, &fdset): add fd to the set
- FD_ISSET(fd, &fdset): return non-0 if fd is in set
** select - synchronous I/O multiplexing
#+BEGIN_SRC C
int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *errorfds, struct timeval *timeout)
#+END_SRC

Block until at least one fd is true for specific condition, unless timeout.

Params
- nfds: the range of file descriptors to be tested. Should be the
  largest one in the sets + 1. But just pass =FD_SETSIZE=.
- readfds: watch for read. can be NULL.
- writefds: watch for write. can be NULL.
- errorfds: watch for error. can be NULL.
- timeout:
  - NULL: no timeout, block forever
  - 0: return immediately. Used for test file descriptors
Return:
- if timeout, return 0
- the sets are modified. Those in sets are those ready
- return the number of ready file descriptors in all sets

#+BEGIN_SRC C
int fd;
// init fd

fd_set set;
FD_ZERO(&set)
FD_SET(fd, &set);

struct timeval timeout;
timeout.tv_sec = 1;
timeout.tv_usec = 0;

select(FD_SETSIZE, &set, NULL, NULL, &timeout);
#+END_SRC

** sync
#+BEGIN_SRC C
void sync(void) // sync all dirty files
int fsync(int filedes) // sync only that file
#+END_SRC

** dup
You can create a new descriptor to refer to the same file. They
- share file position
- share status flag
- seperate descriptor flags

#+BEGIN_SRC C
int dup(int old)
// same as
fcntl(old, F_DUPFD, 0)
#+END_SRC

Copy old to the first available descriptor number.

#+BEGIN_SRC C
int dup2(int old, int new)
// same as
close(new)
fcntl(old, F_DUPFD, new)
#+END_SRC

If old is invalid, it does nothing (does not close =new=)!

* Date and Time
- calendar time: absolute time, e.g. 2017/6/29
- interval: between two calendar times
- elapsed time: length of interval
- amount of time: sum of elapsed times
- period: elapsed time between two events
- CPU time: like calendar time, but relative to process, i.e. when the
  process run on CPU
- Processor time: amount of time a CPU is in use.

** struct timeval
- time_t tv_sec: seconds
- long int tv_usec: micro seconds, must be less than 1 million

** struct timespec
- time_t tv_sec
- long int tv_nsec: nanoseconds. Must be less than 1 billion

** difftime
#+BEGIN_SRC C
double difftime (time_t time1, time_t time0)
#+END_SRC

** time_t
On GNU it is long int. It should be the seconds elapsed since 00:00:00
Jan 1 1970, Coordinated Universal Time.

get current calenddar time:
#+BEGIN_SRC C
time_t time(time_t *result)
#+END_SRC

** alarm
*** struct itimerval
- struct timeval it_interval: 0 to send alarm once, non-zero to send every interval
- struct timeval it_value: time left to alarm. If 0, the alarm is disabled
*** setitimer
#+BEGIN_SRC C
int setitimer(int which, const struct itimerval *new, struct itimerval *old)
#+END_SRC
- which: ITIMER_REAL, ITIMER_VIRTUAL, ITIMER_PROF
- new: set to new
- old: if not NULL, fill with old value

*** getitimer(int which, struct itimerval *old)
get the timer

*** alarm
#+BEGIN_SRC C
unsigned int alarm(unsigned int seconds)
#+END_SRC
To cancel existing alarm, use alarm(0).
Return:
- 0: no previous alarm
- non-0: the remaining value of previous alarm

#+BEGIN_SRC C
  unsigned int
  alarm (unsigned int seconds)
  {
    struct itimerval old, new;
    new.it_interval.tv_usec = 0;
    new.it_interval.tv_sec = 0;
    new.it_value.tv_usec = 0;
    new.it_value.tv_sec = (long int) seconds;
    if (setitimer (ITIMER_REAL, &new, &old) < 0)
      return 0;
    else
      return old.it_value.tv_sec;
  }
#+END_SRC

* Process
Three steps
- create child process
- run an executable
- coordinate the results with parent
** system
#+BEGIN_SRC C
int system(const char *command)
#+END_SRC
- use =sh= to execute, and search in $PATH
- return -1 on error
- return the status code for the child
** getpid
- pid_t getpid(void): return PID of current process
- pid_t getppid(void): PID of parent process

** fork
#+BEGIN_SRC C
pid_t fork(void)
#+END_SRC

return
- 0 in child
- child's PID in parent
- -1 on error

** exec
#+BEGIN_SRC C
int execv (const char *filename, char *const argv[])
int execl (const char *filename, const char *arg0, ...)
int execve (const char *filename, char *const argv[], char *const env[])
int execle (const char *filename, const char *arg0, ..., char *const env[])
int execvp (const char *filename, char *const argv[])
int execlp (const char *filename, const char *arg0, ...)
#+END_SRC

- execv: the last of argv array must be NULL. All strings are null-terminated.
- execl: argv are seperated, the last one must be NULL
- execve: provide env
- execle
- execvp: find filename in $PATH
- execlp

** wait
This should be used in parent process.

#+BEGIN_SRC C
pid_t waitpid(pid_t pid, int *status_ptr, int options)
#+END_SRC

- pid:
  - positive: the pid for a child process
  - -1 (WAIT_ANY): any child process
  - 0 (WAIT_MYPGRP): any child process that has the same /process group ID/ as the parent
  - -pgid (any other negative value): any child process having the
    /process group ID/ as gpid
- options: OR of the following
  - WNOHANG: no hang: the parent process should not wait
  - WUNTRACED: report stopped process as well as the terminated ones
- return: PID of the child process that is reporting
#+BEGIN_SRC C
pid_t wait(int *status_ptr)
#+END_SRC

=wait(&status)= is same as =waitpid(-1, &status, 0)=

*** Status
The signature is =int NAME(int status)=.
- WIFEXITED: if exited: return non-0 if child terminated normally with exit
- WEXITSTATUS: exit status: if above true, this is the low-order 8
  bits of the exit code
- WIFSIGNALED: if signaled: non-0 if the process terminated because it
  receives a signal that was not handled
- WTERMSIG: term sig: if above true, return that signal number
- WCOREDUMP: core dump: non-0 if the child process terminated and
  produce a core dump
- WIFSTOPPED: if stopped: if the child process stopped
- WSTOPSIG: stop sig: if above true, return the signal number that
  cause the child to stop

**** TODO What is the difference between terminate and stop?

* Tmp

** poll - input/output multiplexing
#+BEGIN_SRC C
int poll(struct pollfd fds[], nfds_t nfds, int timeout)
#+END_SRC

** sigaction
#+BEGIN_SRC C
  // handler must be void (*) (int)
  void handle_signal(int signal) {
    // should be alarm
    if (signal != SIGALRM) {
      std::cerr << "Wrong signal: " << signal << "\n";
    }
  }
  int main() {
    struct sigaction sa;
    sa.sa_handler = &handle_signal;
    sigaction(SIGALRM, &sa, NULL);
    ualarm(timeout_usec, 0);
  }
#+END_SRC
** execvp
** pipe
#+BEGIN_SRC C
int pipe(int filedes[2])
#+END_SRC

- Create a pipie and puts the filedes[0] for reading, filedes[1] for writing
Return:
- 0 on success, -1 on failure
** timeradd
#+BEGIN_SRC C
void timeradd(struct timeval *a, struct timeval *b,
              struct timeval *res);
void timersub(struct timeval *a, struct timeval *b,
              struct timeval *res);
void timerclear(struct timeval *tvp);
int timerisset(struct timeval *tvp);
int timercmp(struct timeval *a, struct timeval *b, CMP);
#+END_SRC

- timeradd: res = a+b
- timersub: res = a-b
** kill
#+BEGIN_SRC C
int kill(pid_t pid, int sig)
#+END_SRC
