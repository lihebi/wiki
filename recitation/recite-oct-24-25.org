#+TITLE: Lambda Calculus Example
#+STARTUP: beamer
#+AUTHOR: Hebi Li
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+BEAMER-FRAME-LEVEL: 2
#+BEAMER_THEME: Madrid
#+OPTIONS: H:2 toc:nil num:t author:t
#+LATEX_HEADER: \lstset{numbers=none,frame=shadowbox, basicstyle=\scriptsize, breaklines=true, basewidth={0.45em,0.3em}, stringstyle=\ttfamily}

* Overview
** concept
- Lambda expression:
  \lambda x.e
- Application:
  (e e)

** representation
- ((\lambda(x) (\lambda y) (+ x y))) 1 2
- (((\lambda x .\lambda y. (+ x y)) 1) 2)


** \beta-reduction:
evaluate an expression by replacing the free variable.

((x  (x)(y  (y)(+x y))y )x 1)

- \lambda x. \lambda y. (+ x y)    1
- \lambda x. \lambda y. \lambda x (+ x y)     1 2 3

** \alpha-conversion
\alpha-conversion:
rename variable.

((x  (x)(y  (y)(+x y))y )x 1)

** Order of evaluation

((\lambda x . (+ x 1)) (\lambda  y . (+ y 1))  2)

Can be:
- (+ (\lambda y . (+ y 1) 2) 1)
- (\lambda x . (+ x 1) (+ 2 1))

** Examples
*** Identity function
(\lambda x.x) (\lambda y.y)

*** Self application function
\lambda x.(x x)

** more complicated
*** The expressoin
(((\lambda f.\lambda x. (f x))
  \lambda y.y)
    \lambda z.(z z))



- g = \lambda y.y
- v = \lambda z.(z z)

*** Turn into
- (\lambda f.\lambda x.(f x))   g    v
- (g v) = \lambda z.(z z)

** Church encoding
- numbers: 0, 1, 2, ...
- number fnction: succ, add
- boolean: true, false
- boolean function: ite, not

** Numbers
- zero :: \lambda f.\lambda x.x
- one :: \lambda f.\lambda x.(f x)
- two :: \lambda f.\lambda x.(f (f x))
- n ::

E.g. ((two g) z) == (g (g z))

** Functions
- succ :: \lambda n. \lambda f. \lambda x. (f ((n f) x))
- (succ (succ zero))
- add :: \lambda m. \lambda n. \lambda f. \lambda x. ((((m succ) n) f) x)

** boolean
- true :: \lambda x. \lambda y. x
- false :: \lambda x. \lambda y. y
- ite :: \lambda c .\lambda t. \lambda e. ((c t) e)

Examples:
- (((ite true) s1) s2) ::
- not a :: (((ite a) false) true)
