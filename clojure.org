#+TITLE: Clojure

# https://clojuredocs.org/quickref


The documen for clojure is terrible. I like the scheme and common-lisp
document better. I simply want to read a well sectioned document containing all things.
- the reference is part, not all
- the library API is not ordered at all
- the official cheatsheet contains duplicated items here and there
- the un-official manuals and cheatsheet are not complete

Suspend the interest for clojure for now.

The [[file:clojure-other.org][old clojure page]]


* Type
** Number
*** Arithmetic
- +-*/
- quot
- rem
- mod
- inc
- dec
- max
- min
- with-precision

*** Compare
- =
- ==
- not=
- <, <=, >, >=

*** Bitwise
- bit-and
- bit-or
- bit-xor
- bit-flip
- bit-not
- bit-clear
- bit-set
- bit-shift-right
- bit-shift-left
- bit-test

*** Cast
- byte
- short
- int
- long
- float
- double
- bigint
- bigdec
- num
- rationalize
*** Predicate
- nil?
- identical?
- zero?
- pos?
- neg?
- even?
- odd?

Other
- number?
- rational?
- integer?
- ratio?
- decimal?
- float?
*** Random
- rand
- rand-int


** symbols & keywords
literals for keywords: =:kw=, =:my.ns/kw=, =::in-cur-ns=


** String
*** Use
- count
- get
- subs

- join
- escape
- split
- split-lines
- replace
- replace-first
- reverse
- index-of
- last-index-of
*** Regex
- #"pattern"
- re-find
- re-seq
- re-matches
- re-pattern
- re-matcher
- re-groups
- replace
- replace-first
- re-quote-replacement
*** Letter
- capitalize
- lower-case
- upper-case
*** trim
- trim
- trim-newline
- triml
- trimr
*** Predicate
- string?
- blank?
- starts-with?
- ends-with?
- includes?
*** characters
- literals: =\a= =\newline=
- char
- char?
- char-name-string
- char-escape-string


* Collections
** Collection
*** Generic
- count
- empty
- not-empty
*** ops
- into
- conj
- walk
- prewalk
- prewalk-demo
- prewalk-replace
*** Predicates
- distince?
- empty?
- every?
- not-every?
- some
- not-any?
*** Capabilities
- sequential?
- associative?
- sorted?
- counted?
- reversible?
- coll?
- list?
- vector?
- set?
- map?
- seq?
- record?
- map-entry?
** List
- list
- list*
- first
- nth
- peek
- .indexOf
- .lastIndexOf
- cons
- conj
- rest
- pop

** Vector
*** Create
- =[ ]=
- vector
- vec
- vector-of
- mapv
- filterv
- vector-of
*** Examine
- nth
- get
- peek



