#+TITLE: Clojure

# https://clojuredocs.org/quickref

* Emacs
It is called cider
- https://github.com/clojure-emacs/cider
- https://cider.readthedocs.io/en/latest/

First, `lein new hello-world` to create a hello-world project.

Navigate emacs to one of the files or the directory inside the project
and call `cider-jack-in`.

** Eval
- cider-eval-last-sexp (C-x C-e)
- cider-eval-defun-at-point (C-M-x)
- cider-interrupt: interrupt pending evaluation
- cider-macroexpand-1 (C-c C-m)
- cider-load-buffer
- cider-refresh: reload all modified files
- cider-inspect (C-c M-i)

** Navigation
- cider-switch-to-repl-buffer (C-c C-z)
- cider-quit

** Doc
- cider-doc (C-c C-d C-d)
- cider-javadoc (C-c C-d C-j): display in browser

** Tests
- cider-test-run-test: run test at point
- cider-test-rerun-test: rerun the last test
- cider-test-run-project-tests
- cider-test-rerun-failed-tests
- cider-test-show-report

* Lein
#+BEGIN_EXAMPLE
lein new hello-world
cd hello-world
lein deps # install deps
lein repl # start repl
#+END_EXAMPLE

* A first try

** Setup
First, install clojure and lein2.

To start a new project:
#+BEGIN_EXAMPLE
lein new myproj
cd myproj
lein repl
#+END_EXAMPLE


This will install dependencies and enter repl.


** Type
Since clojure sits on top of JVM, the type seems to be the same, and
you can get the type of something by the function =type=.

#+BEGIN_EXAMPLE
user=> (type 3)
;; java.lang.Long
user=> (type :cat)
clojure.lang.Keyword
#+END_EXAMPLE

A list of types
- java.lang.Long :: (type 3)
- clojure.lang.BigInt :: (type 5N)
- java.lang.Integer :: (type (int 0))
- java.lang.Short :: (type (short 0))
- java.lang.Byte :: (type (byte 0))
- java.lang.Double :: (type 1.23)
- java.lang.Float :: (type (float 1.23))
- java.lang.String :: (type "cat")
- clojure.lang.Symbol :: (class 'str)
- clojure.lang.Keyword :: (type :cat)
- clojure.lang.PersistentList :: (type '(1 2 3))
- clojure.lang.PersistentVector :: (type [1 2 3])
- clojure.lang.PersistentHashSet :: #{:a :b :c}
- clojure.lang.PersistentArrayMap :: {:name "mittens" :weight 9 :color "black"}

** Function
- let ::
- fn :: lambda function
- def :: symbol
- defn :: define a named function

** Macro
- defmacro ::

** State
*** delay

Basically this is an abstraction of function: define a function will
not evaluate function body. So delay works similar: the call to delay
returns an Delay Object, which can be called on by =deref= to evaluate
the body.

#+BEGIN_SRC clojure
(def later (fn [] (prn "Adding") (+ 1 2)))
(later) ;; => print output

(def later (delay (prn "Adding") (+ 1 2)))
(deref later) ;; => print output
#+END_SRC

The difference between a delay and a function:
- function evaluate every time it is called
- delays only evaluate their expressions once. They remember their
  value, after the first evaluation, and return it for every
  successive deref.

The delay opeartor: =@later= is equivalent to =(deref later)=.
*** Future
This is for parallel.

#+BEGIN_QUOTE
I don’t need the result of evaluating these expressions yet, but I’d
like it later. Could you start working on it in the meantime?
#+END_QUOTE

#+BEGIN_SRC clojure
(def x (future (prn "hi") (+ 1 2)))
(deref x) ;; => 3
#+END_SRC

The body of future is executed in a *new thread* in parallel! Deref it
will get the value of the *last* expression.  Like delays, the
expressions are only evaluated once.

**** Atom
The parallel program brings thread-safe problem: modify something at
the same time in different threads. Clojure has a =atom= function to
protect a data and ensure its thread-safety.

Use =reset!= to set value of atom, and use =swap!= to update.

#+BEGIN_SRC clojure
(def xs #{})
(dotimes [i 10] (future (def xs (conj xs i))))
user=> xs ;; => #{1 4 5 7}

(def xs (atom #{}))
(dotimes [i 10] (future (swap! xs conj i)))
user=> @xs ;; => #{0 1 2 3 4 5 6 7 8 9}
#+END_SRC

**** Ref
Atom is linearizable, but not serializable: it does not guarantee
orders. Ref is serializable.

Use =ref-set= to set value of a ref, and use =alter= to update. They
must be in a =dosync= block, and the block order is guaranteed.

#+BEGIN_SRC clojure
user=> (def x (ref 0))
user=> (def y (ref 0))
user=> (dosync
         (ref-set x 1)
         (ref-set y 2))
2
user=> [@x @y]
[1 2]

user=> (def x (ref 1))
user=> (def y (ref 2))
user=> (dosync
         (alter x + 2)
         (alter y inc))
3
user=> [@x @y]
[3 3]
#+END_SRC

If some of the refs do not need order, you can boost the program by
release that, using =commute=:

#+BEGIN_SRC clojure
user=> (dosync
         (commute x + 2)
         (commute y inc))
#+END_SRC

Finally, you can use =ensure= to update one ref using another,
guaranteeing order.
#+BEGIN_SRC clojure
user=> (dosync
         (alter x + (ensure y)))
#+END_SRC

*** Promise
#+BEGIN_QUOTE
Delays defer evaluation, and futures parallelize it. What if we wanted
to defer something we dont even have yet? To hand someone an empty box
and, later, before they open it, sneak in and replacing its contents
with an actual gift?
#+END_QUOTE

#+BEGIN_SRC clojure
(def box (promise))
(deref box) ;; empty
(deliver box :live-scorpiojns!)
(deref box) ;; => live-scorpiojns!
(deliver box :puppy) ;; => nil
(deref box) ;; => live-scorpiojns!
#+END_SRC

Some highlights:
- box contains nothing initially
- can be delivered
- cannot be re-delivered


** TODO Logistics
https://aphyr.com/posts/311-clojure-from-the-ground-up-logistics

** TODO Modeling
https://aphyr.com/posts/312-clojure-from-the-ground-up-modeling

** TODO Debugging
https://aphyr.com/posts/319-clojure-from-the-ground-up-debugging

* clojure.core
- =*in*=
- =*out*=
- =*err*=

- assert


** Namespace
Namespaces are maps that map name to var. Namespace is seperated by
dot, similar to java. The recommended format: =org.lib.funcgroup=.

- =clojure.core/ns=: [name docstring? attr-map? references*]
  - set =*ns*= to name
  - references are same as calling them, except arguments are not quoted
    - (:refer-clojure ...)
    - (:require ...)
    - (:use ...)
    - (:import ...)
    - (:load ...)
    - (:gen-class)

- =require [& args]=: The scope will be available, the functions under
  them can be called using the scope.
  - load libs, skip already loaded.
  - do not usually use directly, use in =ns= instead
  - args can be a single symbol, or with options. It recognizes options
    - =:as sym=: as a symbol. e.g. =(require [clojure.walk :as walk])=
    - =:refer sym-list=: the list of symbols inside the lib can be
      called without the scope. The list can be =:all=
- =refer [ns-sym &filters]=: refer to all public vars of ns into
  current namespace. Filters:
  - :exclude list-of-symbols
  - :only list-of-symbols
  - :rename map-of-fromsymbol-tosymbol
- =refer-clojure [& filters]=: same as (refer 'clojure-core
  <filters>). clojure-core is refered by default, so this is typically
  used with exclude filter.
- =use [& args]=: do not use after clojure 1.4. Use =require= with
  =:refer= instead
  1. require
  2. refer the lib's namespace
- =import [& import-symbols-or-lists]=: as import a java classes and
  make them usable in their short name in clojure
  - since we have the rest sign =&=, the arguments are not inside a
    list, but as multiple arguments for import
  - as the argument name indicates, it can be symbol or list
    - symbol: is the full java class, e.g. =java.util.Date=
    - list: to save some typing, if importing multiple classes from
      same namespace: =[java.util.concurrent Executors TimeUnit]=

* Type
** Number
*** Arithmetic
- +-*/
- quot
- rem
- mod
- inc
- dec
- max
- min
- with-precision

*** Compare
- =
- ==
- not=
- <, <=, >, >=

*** Bitwise
- bit-and
- bit-or
- bit-xor
- bit-flip
- bit-not
- bit-clear
- bit-set
- bit-shift-right
- bit-shift-left
- bit-test

*** Cast
- byte
- short
- int
- long
- float
- double
- bigint
- bigdec
- num
- rationalize
*** Predicate
- nil?
- identical?
- zero?
- pos?
- neg?
- even?
- odd?

Other
- number?
- rational?
- integer?
- ratio?
- decimal?
- float?
*** Random
- rand
- rand-int


** symbols & keywords
literals for keywords: =:kw=, =:my.ns/kw=, =::in-cur-ns=


** String
*** Use
- count
- get
- subs

- join
- escape
- split
- split-lines
- replace
- replace-first
- reverse
- index-of
- last-index-of
*** Regex
- #"pattern"
- re-find
- re-seq
- re-matches
- re-pattern
- re-matcher
- re-groups
- replace
- replace-first
- re-quote-replacement
*** Letter
- capitalize
- lower-case
- upper-case
*** trim
- trim
- trim-newline
- triml
- trimr
*** Predicate
- string?
- blank?
- starts-with?
- ends-with?
- includes?
*** characters
- literals: =\a= =\newline=
- char
- char?
- char-name-string
- char-escape-string


* Collections
** Collection
*** Generic
- count
- empty
- not-empty
*** ops
- into
- conj
- walk
- prewalk
- prewalk-demo
- prewalk-replace
*** Predicates
- distince?
- empty?
- every?
- not-every?
- some
- not-any?
*** Capabilities
- sequential?
- associative?
- sorted?
- counted?
- reversible?
- coll?
- list?
- vector?
- set?
- map?
- seq?
- record?
- map-entry?
** List
- list
- list*
- first
- nth
- peek
- .indexOf
- .lastIndexOf
- cons
- conj
- rest
- pop

** Vector
*** Create
- =[ ]=
- vector
- vec
- vector-of
- mapv
- filterv
- vector-of
*** Examine
- nth
- get
- peek



* Reference
- https://clojure.github.io/ is the API reference, in alphabet order

Some interesting projects:
- [[file:supercollider.org][SuperCollider]] is a server and a language for music synthesizing.
- [[file:overtone.org][Overtone]] offers a /clojure/ wrapper and emacs environment for the SuperCollider backend.
- https://github.com/ring-clojure/ring
- http://liquidz.github.io/
- https://github.com/liquidz/misaki
- http://nakkaya.com/



