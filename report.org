#+TITLE: Assertion Experiment
#+LATEX_CLASS: fse

* Experiment Meta data
Meta data for assertions in top 1000 github projects.

| item         | count |
|--------------+-------|
| assert       | 17066 |
| length < 60  |   264 |
| length < 80  |  2534 |
| length < 100 |  7062 |

Currently testing on "length < 60" ones, and assume the variable used
is integer (for outputing)

* Some discovered examples:

Three queries are resolved successfully. All of them are proved safe assertions.

** nsf--termbox/termbox.c:594

#+BEGIN_SRC C
int read_up_to(int n) {
  assert(n>0);
  // more code
}
#+END_SRC

#+BEGIN_SRC C
foo() {
  read_up_to(64);
}
#+END_SRC

and there're two call sites of it both by 

** samr7--vanitygen/pattern.c:432
#+BEGIN_SRC C
p = snprintf(&linebuf[p], rem, "[Prob %.1f%%]", prob*100);
assert(p>0);
#+END_SRC

constant p=11

** spdk--spdk/conn.c:144

#+BEGIN_SRC C
  void foo() {
    if (g_conn_idle_interval_in_tsc == -1)
      spdk_isc(...)
        STAILQ_INIT(&g_idle_conn_list_head);
    if (iit_idle_conns() < 0) {
      return -1;
    }
  }

  static int init_idle_conns(void) {
    assert(g_epoll_fd == 0);
  }
#+END_SRC

** About the data
Whether this is what we expected, and also need to make more
complicated ones working.
what's the difficulty of extend to more complicated ones

A list of assertions is attached. From there we might see which kind is easy to handle

* TODO Scope of analysis
